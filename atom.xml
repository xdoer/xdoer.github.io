<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://aiyou.life</id>
    <title>文享日志</title>
    <updated>2021-08-31T11:01:51.087Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://aiyou.life"/>
    <link rel="self" href="https://aiyou.life/atom.xml"/>
    <logo>https://aiyou.life/images/avatar.png</logo>
    <icon>https://aiyou.life/favicon.ico</icon>
    <rights>All rights reserved 2021, 文享日志</rights>
    <entry>
        <title type="html"><![CDATA[Restful-API 的一种动态生成数据类型的方法]]></title>
        <id>https://aiyou.life/post/QqaRhC3Gf/</id>
        <link href="https://aiyou.life/post/QqaRhC3Gf/">
        </link>
        <updated>2021-08-31T03:34:31.000Z</updated>
        <summary type="html"><![CDATA[<p>使用 TypeScript 开发前端项目，完善的类型批注是非常提升开发效率的。然而，当遇到 Restful，似乎只能为 Restful 返回的 JSON 数据手动书写类型，随着接口越来越多，手写类型是繁琐且低效的。 有没有一种简单的方式，可以拿到返回数据的类型呢？</p>
]]></summary>
        <content type="html"><![CDATA[<p>使用 TypeScript 开发前端项目，完善的类型批注是非常提升开发效率的。然而，当遇到 Restful，似乎只能为 Restful 返回的 JSON 数据手动书写类型，随着接口越来越多，手写类型是繁琐且低效的。 有没有一种简单的方式，可以拿到返回数据的类型呢？</p>
<!-- more -->
<h2 id="json-类型文件生成">JSON 类型文件生成</h2>
<h3 id="json-类型">JSON 类型</h3>
<p>Json 中数据类型有 6 种: string 、number、boolean、array、object、null</p>
<p>其中 string、number、boolean 的类型可以直接使用 <code>typeof</code> 判别类型。</p>
<p>null 有些复杂，它可能是其他 5 中类型中的一种，无法判断具体是什么类型，因而只能填充 any</p>
<p>对于 object，它可能由 Json 的 6 种数据结构组成，可以使用递归遍历的方式，来判断 value 的类型</p>
<p>而对于 array ，array 中的每一项数据结构应当都是相同的，因而只需要取出第一项进行处理，处理逻辑与上述几种类型相同。</p>
<h3 id="文件生成">文件生成</h3>
<p>可以使用 node fs api，利用拼接字符串的形式，将 JSON 类型处理后，输出到类型文件中。这样简单且有效，但不那么优雅，且易出错。</p>
<p>可以借助 <a href="https://ts-morph.com/">ts-morph</a> 这个库，来完成类型的生成和导出。</p>
<p>ts-morph 使用伪代码如下:</p>
<pre><code class="language-text">const project = createProject()
project.addInterface({ name, value }).setIsExport(true)
saveProject(project)
</code></pre>
<p>相比 fs API，ts-morph 使用更简单</p>
<h2 id="restful-整合">Restful 整合</h2>
<p>可以根据 JSON 数据生成类型文件后，很容易想到，在请求库的拦截器中，拦截响应，执行 JSON 类型文件生成。但值得注意的是，前端项目中，Node API 不能使用，因为你的代码是运行在浏览器的。那么怎么解决这个问题呢？</p>
<h3 id="类型生成器脚本">类型生成器脚本</h3>
<p>既然前端项目中不能集成JSON类型文件生成工具，那么可以编写 Node 脚本来解决问题。后端提供一个接口后，前端新增一个接口，脚本配置文件也要注册一个接口，最后运行一下脚本即可。</p>
<p>那么看看脚本需要完成哪些功能。</p>
<p>首先脚本需要集成一个请求库，用以发起请求，接收服务端的 JSON 数据。</p>
<p>然后还要集成上面的 JSON类型文件生成脚本。</p>
<p>此外，还需要维护一份配置文件，文件中要有请求参数列表，用以动态生成类型文件。为了避免同时发起的请求数量太多，导致电脑死机，或者服务端宕机，还要对请求进行并发控制。</p>
<p>每次执行脚本，所有请求都会再发送一遍，所以还要考虑检测文件是否生成，再去请求。</p>
<p>考虑到可维护性，建议单独维护一个 URL 的映射文件，在Node脚本和前端项目，引用 URL 文件的URL 地址。</p>
<p>有了这样一个脚本，每次新增一个接口时，需要在配置文件中配一下接口和请求参数，然后手动执行一下脚本。这样也不太方便，可以使用 <a href="https://github.com/paulmillr/chokidar">chokidar</a> 监听文件变更，使用 shelljs 来执行脚本。</p>
<p>可以看到，上面的步骤繁琐且复杂，维护这样一个复杂配置文件，会让人望而却步。并且这样的配置文件对于一些复杂的请求，涉及到的 Token 校验， Post 的 Body 处理，响应的 Data 的处理等等都要区别与前端项目，再单独处理一遍。</p>
<p>有没有更好的办法，来完成类型生成的目的？</p>
<h3 id="server-clinet-类型生成器">Server-Clinet 类型生成器</h3>
<p>写这样一个脚本，主要的难点在于Node脚本怎么便捷的拿到前端项目的响应数据，也就是前端拿到数据后怎么通知到脚本？</p>
<p>这么一想，事情就简单了，如果 Node 脚本中开启一个 HTTP Server，前端拿到数据后，再向 HTTP Server 发起一个 POST 请求，将一些参数携带过去，指挥 HTTP Server 向目标目录生成类型文件即可。</p>
<p>但这一套流程还有个缺点，类型文件是“运行时”生成的，生成类型文件前，需要前端项目先调用一次请求。但是，这一点缺点无伤大雅，开发代码时，肯定需要先测试接口能不能通什么的。</p>
<h2 id="效果展示">效果展示</h2>
<p>基于几天的尝试，我开发了几个库，完成了这样一件事情，最后看 demo 的效果，还不错。</p>
<h3 id="demo-项目">Demo 项目</h3>
<p>我基于 Vite React TypeScript 写了一个 demo 项目：<a href="https://github.com/xdoer/restful-types-generate-example">restful-types-generate-example</a>。</p>
<p>clone 项目后，运行 yarn 安装, yarn dev 启动项目，点击页面按钮，发起请求后即可看到效果。</p>
<figure data-type="image" tabindex="1"><img src="https://aiyou.life/post-images/1630407294021.gif" alt="" loading="lazy"></figure>
<h3 id="jsontypesgenerator">JsonTypesGenerator</h3>
<p><a href="https://github.com/xdoer/json-types-generator">json-types-generator</a> 是根据第一小节中介绍的原理完成的</p>
<p>使用方式如下:</p>
<pre><code class="language-ts">import jsonTypesGenerator from 'json-types-generator'

const json = { a: { b: 1, c: { d: true } } }

jsonTypesGenerator({
   data: json,
   outPutPath: '/User/xdoer/types.ts',
   rootInterfaceName: 'ChinaRegion',
   customInterfaceName(key, value, data) {
      if (key === 'b') return 'Province'
   },
})
</code></pre>
<p>上面的代码，将会在 <code>/User/xdoer/types.ts</code> 文件中生成导出 interface 为 <code>ChinaRegion</code> 的类型文件，产生的中间 inteface 名称为 <code>Province</code>，中间产物默认的 interface 名称为 key 的大写</p>
<pre><code class="language-ts">&lt;!----/User/xdoer/types.ts----&gt;
export interface ChinaRegion {
    a: Province
}

export interface Province {
    b: number
    c: C
}

export interface C {
    d: boolean
}
</code></pre>
<h3 id="responsetypesserver">ResponseTypesServer</h3>
<p><a href="https://github.com/xdoer/PreQuest/tree/main/packages/response-types-server">response-types-server</a> 是上文提到的 Server-Clinet 类型生成器 中的 Server 部分。只需要向这个Server 发送 POST 请求，即可生成类型。</p>
<p>使用方式如下:</p>
<pre><code class="language-ts">import server from '@prequest/response-types-server'

// 默认开启的端口为 10086
server()

// 你可以通过传参指定端口
server({ port: 10010 })
</code></pre>
<p>发送的请求，路径任意， POST 请求参数为:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>outPutDir</td>
<td>string</td>
<td>类型文件输出目录</td>
</tr>
<tr>
<td>outPutName</td>
<td>string</td>
<td>文件名称</td>
</tr>
<tr>
<td>overwrite</td>
<td>boolean</td>
<td>文件可复写</td>
</tr>
<tr>
<td>data</td>
<td>Json</td>
<td>要解析的 Json 数据</td>
</tr>
<tr>
<td>interfaceName</td>
<td>string</td>
<td>导出的接口名称</td>
</tr>
</tbody>
</table>
<h3 id="responsetypesclient">ResponseTypesClient</h3>
<p><a href="https://github.com/xdoer/PreQuest/tree/main/packages/response-types-client">response-types-client</a> 是上文提到的 Server-Clinet 类型生成器 中的 Client 部分。它是一个中间件 Wrapper，只要将其注册到请求库中间件中，即可发起请求。</p>
<p>下面的 demo 使用了我自己封装的请求库 PreQuest，基于 Koa 中间件模型的请求库应该都可以使用，比如说 Umi-Request。对于 Axios，需要自己在拦截器中实现，也非常容易。</p>
<p>使用方式如下：</p>
<pre><code class="language-ts">import { create, Request, Response } from '@prequest/xhr'
import generateMiddleware, { TypesGeneratorInject } from '@prequest/response-types-client'

// 生成中间件
const middleware = generateMiddleware&lt;Request, Response&gt;({
  enable: process.env.NODE_ENV === 'development',
  httpAgent: create({ path: 'http://localhost:10010/' }),
  outPutDir: 'src/api-types'
  parseResponse(res) {
    // res 应当返回接口 data 数据
    return res as any
  },
  typesGeneratorConfig(req, res) {
    const { path } = req
    const { data } = res

    if (!path) throw new Error('path not found')

    // 根据请求路径生成文件名和类型导出名称
    const outPutName = path.replace(/.*\/(\w+)/, (_, __) =&gt; __)
    const interfaceName = outPutName.replace(/^[a-z]/, g =&gt; g.toUpperCase())

    return {
      data,
      outPutName,
      interfaceName,
      overwrite: true,
    }
  },
})

// 注入 TypesGeneratorInject， 可在请求时，根据 rewriteType 参数强制重新生成类型文件
export const prequest = create&lt;TypesGeneratorInject, {}&gt;({ baseURL: 'http://localhost:3000' })
// 注册中间件
prequest.use(middleware)
</code></pre>
<h3 id="responsetypesgenerator">ResponseTypesGenerator</h3>
<p>此外，还有基于上文 &quot;类型生成器脚本&quot; 一节中的原理，进行了一个失败的尝试:<a href="https://github.com/xdoer/PreQuest/tree/main/packages/response-types-generator">response-types-generator</a>，也一并放到这里，感兴趣的可以看看</p>
<h2 id="结语">结语</h2>
<p>以上基于我浅薄的学识进行的一些对 Restful 响应的 JSON 数据类型生成的一些探索，如果您发现了文中的一些错误之处，或者有更简便的方式生成类型文件，欢迎在评论里提出来，大家一起探讨。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[几个Demo 看懂 ESM 与 CommonJS 差异]]></title>
        <id>https://aiyou.life/post/SV2erlm_4/</id>
        <link href="https://aiyou.life/post/SV2erlm_4/">
        </link>
        <updated>2021-07-21T12:20:41.000Z</updated>
        <summary type="html"><![CDATA[<p>CommonJS 作为 Node 端模块导入的事实方案，与 ES 标准提出的 ES Module 有何差异呢？</p>
]]></summary>
        <content type="html"><![CDATA[<p>CommonJS 作为 Node 端模块导入的事实方案，与 ES 标准提出的 ES Module 有何差异呢？</p>
<!-- more -->
<h2 id="一-commonjs-和-esm-都可以对引入的对象进行赋值">一、CommonJS 和 ESM 都可以对引入的对象进行赋值</h2>
<h3 id="11-commonjs-模块">1.1 CommonJS 模块</h3>
<pre><code class="language-js">&lt;!--- 定义入口文件 main.js ---&gt;
const { a } = require('./test')

setTimeout(() =&gt; {
  console.log(a.value)
}, 200)

console.log(a.value)

&lt;!--- 定义模块文件 test.js ---&gt;
const a = { value: 1 }

setTimeout(() =&gt; {
  a.value = 2
}, 100)

module.exports = { a }
</code></pre>
<p><strong><em>输出: 1, 2</em></strong></p>
<h3 id="12-esm-模块">1.2 ESM 模块</h3>
<pre><code class="language-js">&lt;!--- 定义入口文件 main.mjs ---&gt;
import  { a }  from './test.mjs'

setTimeout(() =&gt; {
  console.log(a.value)
}, 200)

console.log(a.value)

&lt;!--- 定义模块文件 test.mjs ---&gt;
let a = { value: 1 }

setTimeout(() =&gt; {
  a.value = 2
}, 100)

export { a }
</code></pre>
<p><strong><em>输出: 1, 2</em></strong></p>
<h3 id="13-动态-esm">1.3 动态 ESM</h3>
<pre><code class="language-js">&lt;!--- 定义入口文件 main.mjs ---&gt;
const { a } = await import('./test.mjs')

setTimeout(() =&gt; {
  console.log(a.value)
}, 200)

console.log(a.value)

&lt;!--- 定义模块文件 test.mjs ---&gt;
let a = { value: 1 }

setTimeout(() =&gt; {
  a.value = 2
}, 100)

export { a }
</code></pre>
<p><strong><em>输出: 1, 2</em></strong></p>
<h2 id="二-commonjs-模块输出的是一个值的拷贝esm-模块输出的是值的引用">二、CommonJS 模块输出的是一个值的拷贝，ESM 模块输出的是值的引用</h2>
<h3 id="21-commonjs-模块">2.1 CommonJS 模块</h3>
<pre><code class="language-js">&lt;!--- 定义入口文件 main.js ---&gt;
const { a } = require('./test')

setTimeout(() =&gt; {
  console.log(a)
}, 200)

console.log(a)

&lt;!--- 定义模块文件 test.js ---&gt;
let a = 1

setTimeout(() =&gt; {
  a = 2
}, 100)

module.exports = { a }
</code></pre>
<p><strong><em>输出: 1, 1</em></strong></p>
<h3 id="22-esm-模块">2.2 ESM 模块</h3>
<pre><code class="language-js">&lt;!--- 定义入口文件 main.mjs ---&gt;
import { a }  from './test.mjs'

setTimeout(() =&gt; {
  console.log(a)
}, 200)

console.log(a)

&lt;!--- 定义模块文件 test.mjs ---&gt;
let a = 1

setTimeout(() =&gt; {
  a = 2
}, 100)

export { a }
</code></pre>
<p><strong><em>输出: 1, 2</em></strong></p>
<h3 id="23-动态-esm">2.3 动态 ESM</h3>
<pre><code class="language-js">&lt;!--- 定义入口文件 main.mjs ---&gt;
const { a } = await import('./test.mjs')

setTimeout(() =&gt; {
  console.log(a)
}, 200)

console.log(a)

&lt;!--- 定义模块文件 test.mjs ---&gt;
let a = 1

setTimeout(() =&gt; {
  a = 2
}, 100)

export { a }
</code></pre>
<p><strong><em>输出: 1, 1</em></strong></p>
<h2 id="三-es6-module-只存只读不能改变其值指针指向不能变">三、ES6 Module 只存只读，不能改变其值，指针指向不能变</h2>
<pre><code class="language-js">import * as a from './test.mjs'

a = 2 // throw a error
</code></pre>
<p>import 导入的值类似 const 定义，值不能改变</p>
<h2 id="四-commonjs-模块是运行时加载es6-模块是编译时输出接口">四、CommonJS 模块是运行时加载，ES6 模块是编译时输出接口</h2>
<h2 id="五-commonjs-模块的-require是同步加载模块es6-模块的-import-命令是异步加载">五、CommonJS 模块的 require()是同步加载模块，ES6 模块的 import 命令是异步加载</h2>
<pre><code class="language-js">const { a } = await import('./test.mjs')
</code></pre>
<h2 id="六-commonjs-模块是运行时加载es6-模块是编译时输出接口">六、CommonJS 模块是运行时加载，ES6 模块是编译时输出接口</h2>
<p>CommonJS 加载的是一个对象（即 module.exports 属性），该对象只有在脚本运行完才会生成。而 ESM 不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Taro 自定义 showModal]]></title>
        <id>https://aiyou.life/post/UNWTwtWxa/</id>
        <link href="https://aiyou.life/post/UNWTwtWxa/">
        </link>
        <updated>2021-06-26T07:53:18.000Z</updated>
        <summary type="html"><![CDATA[<p>微信小程序提供了很多类似 <code>wx.showModal</code>、<code>wx.showLoading</code> 这类 API，这类 API 虽然方便使用，但是样式丑陋，往往不满足我们的需求。</p>
<p>有没有办法让我们的自定义弹窗、loading 等可以通过类似微信的这种 API 进行随心所欲的调用呢？</p>
]]></summary>
        <content type="html"><![CDATA[<p>微信小程序提供了很多类似 <code>wx.showModal</code>、<code>wx.showLoading</code> 这类 API，这类 API 虽然方便使用，但是样式丑陋，往往不满足我们的需求。</p>
<p>有没有办法让我们的自定义弹窗、loading 等可以通过类似微信的这种 API 进行随心所欲的调用呢？</p>
<!-- more -->
<p>首先放一下效果图:<br>
<img src="https://aiyou.life/post-images/1624694046612.gif" alt="" loading="lazy"><br>
可以看到只在 Index 页面写了一个按钮，就可以触发打开弹窗。</p>
<p>接着总结一下全文:</p>
<blockquote>
<ul>
<li>利用脚本将每个弹窗文件生成一个弹窗配置</li>
<li>根据弹窗配置，弹窗 wrapper 组件 map 每一个弹窗</li>
<li>使用 webpack-loader 将 wrapper 组件注入到每个页面</li>
<li>使用 chokidar 监听弹窗文件的创建，自动运行脚本，更新弹窗配置</li>
<li>设计 API 式的调用风格</li>
</ul>
</blockquote>
<p>下文涉及的技术栈为: Taro ReactHook TypeScript。可能不具有通用性，但如果能为您带来一些思考和感悟也是极好的。</p>
<h2 id="目标">目标</h2>
<p>首先观察一下特点：</p>
<pre><code class="language-ts">wx.showModal({
  title: &quot;提示&quot;,
  content: &quot;操作不合法&quot;,
});
</code></pre>
<blockquote>
<ul>
<li>1、API 式调用.</li>
<li>2、全局性.在小程序任意地方都可以调用</li>
</ul>
</blockquote>
<h2 id="api-式的调用">API 式的调用</h2>
<p>当进行这样一个调用时，我们需要将数据和状态，通过一定的方式，传入到某个组件中，组件再进行响应。传递数据的方式有 props 与 context。传递 props 方案首先排除了，因为你不可能每个组件要传入弹窗的 props，那么使用 context 方案呢？使用 context 需要在应用顶层提供一个 Provider，将所有弹窗数据和显隐状态，与修改数据的方法传入 Provider 中，在 Consumer 中 map 出所有弹窗数据，在需要打开或关闭弹窗的地方，使用 <code>this.context</code> 或者 <code>useContext</code> 拿到修改数据方法，然后才能控制弹窗状态。</p>
<p>下面提供了一份使用 context 方案的伪代码</p>
<pre><code class="language-tsx">const ModalContext = createContext(null)

&lt;!---- app.tsx 入口文件 ----&gt;
export default function (props) {
  const [config, setConfig] = useState(modals)
  return (
    &lt;ModalContext.Provider value={{config, setConfig}}&gt;
      {props.children}
    &lt;/ModalContext.Provider&gt;
  )
}

&lt;!---- wrapper.tsx 弹窗 wrapper 组件----&gt;
// 这里设计的是 n 多个 modal 实例，原因是将 loading、actionSheet 等统称为 modal.
export function Wrapper() {
  return (
    &lt;ModalContext.Consumer&gt;
      {
        ({config}) =&gt; {
          return (
            &lt;&gt;
              {
                config.map(c =&gt; {
                  return (
                    &lt;Modal data={c} /&gt;
                  )
                })
              }
            &lt;/Modal&gt;
          )
        }
      }
    &lt;/ModalContext.Consumer&gt;
  )
}

&lt;!---- index.tsx 首页文件----&gt;
export default function () {
  const { setConfig } = useContext(ModalContext)

  return (
    &lt;View&gt;
      {/* 这里就不细写了，原理大家可以看懂 */}
      &lt;View onClick={() =&gt; setConfig((d) =&gt; { name: 'a' ,visible: true, data: 1 })}&gt;打开 A 弹窗&lt;/View&gt;
      &lt;Wrapper /&gt;
    &lt;/View&gt;
  )
}
</code></pre>
<p>对于 wrapper 组件，需要引入到每一个页面文件，调用弹窗时使用 <code>useContext</code> 也可以接受，但一定注意优化，任何一处 <code>setConfig</code> 都会导致引入 <code>useContext(ModalContext)</code> 的组件或页面重新渲染。</p>
<p>怎么避免这个问题？</p>
<p>如果能将顶层的 <code>setConfig</code> 存到外部，每次从外部文件引入 setConfig 方法调用、不直接使用 useContext，并配合 memo 就可以解决这个问题</p>
<p>伪代码如下:</p>
<pre><code class="language-ts">&lt;!---- useStore 自定义 hook ----&gt;
export let setModalConfig

export function useStore(initValue) {
  const [config, setConfig] = useState(initValue)
  setModalConfig = setConfig
  return [config, setConfig]
}

&lt;!---- app.tsx 入口文件 ----&gt;
export default function (props) {
  const [config, setConfig] = useStore(modals)
  return (
    &lt;ModalContext.Provider value={{config, setConfig}}&gt;
      {props.children}
    &lt;/ModalContext.Provider&gt;
  )
}
</code></pre>
<p>如果将每一个 <code>useState</code> 的 <code>data</code> 和 <code>setData</code> 存到外部，并为其分配一个标识，那么我们就可以在任意地方根据标识拿到 useState 中的数据和方法。</p>
<p>基于此，我们封装了一套简单易用的状态管理工具 <a href="https://github.com/forsigner/stook">stook</a></p>
<p>简易实现如下:</p>
<pre><code class="language-ts">export const stores[] = []

// 外部修改 hook 状态
export function mutate(key, value) {
  const cacheIdx = stores.findIndex(store =&gt; store.key === key)
  stores[cacheIdx].cbs.forEach(cb =&gt; cb(value))
}

// 外部获取 hooks 状态
export function getState(key) {
  const cacheIdx = stores.findIndex(store =&gt; store.key === key)
  return stores[cacheIdx].value
}

export function useStore(key, initValue?: any) {
    const cache = stores.find(store =&gt; store.key === key)
    // 对于一个相同 key 的 useState, 首先尝试使用缓存数据初始化
    const [state, setState] = useState(cache?.value || initValue)

    // 防止同一个 setState 被缓存多次
    if (!cache?.cbs.find(cb =&gt; cb === setState)) {
      if (!cache) {
        // 对于同名的 key, value应当是相同的，需要将每一个修改状态的函数保存
        stores.push({ key, value: state, cbs: [setState] })
      } else {
        cache.cbs.push(setState)
      }
    }

    useEffect(() =&gt; {
      // 组件或页面卸载
      return () =&gt; {
        const cacheIdx = stores.findIndex(store =&gt; store.key === key)
        const idx = stores[cacheIdx]!.cbs.findIndex(cb =&gt; cb === setState)
        cache!.cbs.splice(idx, 1)
        if (!cache?.cbs.length) {
          stores.splice(cacheIdx, 1)
        }
      }
    }, [key, setState])

    return [
      state,
      function (value) {
        let newValue = value
        if (typeof value === 'function') {
          newValue = value(state)
        }
        const cache = stores.find(store =&gt; store.key === key)!
        cache.value = newValue
        cache.cbs.forEach(cb =&gt; cb(value))
      }
    ]
}
</code></pre>
<p>根据我们设计的状态管理工具，那么可以完全摒弃 context 的方案了。</p>
<pre><code class="language-tsx">&lt;!---- app.tsx 入口文件 ----&gt;
export default function (props) {
  return props.children
}

&lt;!---- wrapper.tsx 弹窗 wrapper 组件----&gt;
export function Wrapper() {
  const [modalConfig] = useStore('modal', config)
  return (
    &lt;&gt;
      {
        ({ modalConfig }) =&gt; {
          return (
            &lt;&gt;
              {
                modalConfig.map(c =&gt; {
                  return (
                    &lt;Modal data={c} /&gt;
                  )
                })
              }
            &lt;/&gt;
          )
        }
      }
    &lt;/&gt;
  )
}

&lt;!---- index.tsx 首页文件----&gt;
export default function () {
  return (
    &lt;View&gt;
      &lt;View onClick={() =&gt; mutate('modal', (d) =&gt; {})}&gt;打开 A 弹窗&lt;/View&gt;
      &lt;Wrapper /&gt;
    &lt;/View&gt;
  )
}
</code></pre>
<p>有了这些基础，通过 API 式的调用弹窗就好实现了很多</p>
<pre><code class="language-ts">class Service {
  openCommonModal(data) {
    mutate(&quot;modal&quot;, (config) =&gt; {
      const commonConfig = config.find(({ name }) =&gt; name === &quot;common&quot;);
      commonConfig.visible = true;
      commonConfig.data = data;
      return [...config];
    });
  }
}
export const service = new Service();
</code></pre>
<p>这样的话，就可以通过 <code>service.openCommonModal</code> 的方式打开弹窗了.</p>
<h2 id="全局调用">全局调用</h2>
<p>小程序中没有办法定义一个全局组件，只能将组件引入到每一个页面中。借助 webpack-loader，我们可以实现每个页面自动注入组件的能力。</p>
<p>我们设计了一个 webpack-loader，来完成这样的事情 <a href="https://github.com/xdoer/taro-inject-component-loader">taro-inject-component-loader</a></p>
<p>注入后的每一个页面，都引入了弹窗组件，因而可以在任意地方进行 service 弹窗的调用。</p>
<h2 id="自动化">自动化</h2>
<p>上面我们一直使用了一个叫做 config 的东西，config 类似路由表文件，是一个 Modal 组件和名称的映射表</p>
<pre><code class="language-ts">const config = [
  {
    name: &quot;common&quot;,
    component: CommonModal,
  },
];
</code></pre>
<p>为了方便维护，建议将所有的 modal 文件放置到一个文件夹下。</p>
<pre><code class="language-text">|---src
|----|----modals
|----|------|------common.tsx
|----|------|------loading.tsx
|----|------|------actionSheet.tsx
</code></pre>
<p>这样的话，可以使用脚本工具，遍历该文件夹，自动生成一份配置文件。效果与 umi 约定式路由类似。此外，可以使用 chokidar 监听 modals 文件夹下文件的删除和创建，来自动更新 config 配置文件。</p>
<p>其实不光是 config 配置文件、如果仔细观察 service 文件的话，也可以使用脚本，自动生成一份 service 文件。</p>
<p>我们团队设计和实现了一套脚本工具来完成这样的功能。</p>
<blockquote>
<ul>
<li><a href="https://github.com/forsigner/generated">generated</a>.一个 cli 工具，主要用来运行配置的脚本文件</li>
<li><a href="https://github.com/xdoer/generated-plugin-taro-modal-service">generated-plugin-taro-modal-service</a>.使用了 <a href="https://ts-morph.com/">ts-morph</a> 生成弹窗配置文件。</li>
<li><a href="https://github.com/xdoer/webpack-plugin-chokidar/blob/main/README_zh.md">webpack-plugin-chokidar</a>. 结合 webpack 和 chokidar，优化了 在 webpack 中使用的 api 设计</li>
</ul>
</blockquote>
<h2 id="结语">结语</h2>
<p>希望此文能为大家带来帮助。</p>
<p>本文涉及到的内容和模板在<a href="https://github.com/xdoer/TaroTemplate">这里</a>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[写一个倒计时😢？]]></title>
        <id>https://aiyou.life/post/iWhkaOqqO/</id>
        <link href="https://aiyou.life/post/iWhkaOqqO/">
        </link>
        <updated>2021-06-01T08:20:34.000Z</updated>
        <summary type="html"><![CDATA[<p>如何写一个高性能、易扩展、易用的计时器？</p>
]]></summary>
        <content type="html"><![CDATA[<p>如何写一个高性能、易扩展、易用的计时器？</p>
<!-- more -->
<p>某日，接到了产品需求，说要加一个抢购列表页面，列表中每一项要加一个抢购倒计时，没多想，使用 <code>setInterval</code> 快速实现了。</p>
<p>随着列表中项目越来越多，各个项目的倒计时越来越不准，且页面变的越来越卡。</p>
<p>其实很容易想到，n 多个 <code>setInterval</code> 实例同时运行，阻塞了 JS 线程，导致页面越来越卡，计时器计时出现了偏差。有没有办法用一个 <code>setInterval</code> 实例，进行多个倒计时呢?</p>
<p>首先看一下 <code>setInterval</code> 用法:</p>
<pre><code class="language-js">setInterval(() =&gt; {
    // callback
}, 1000)
</code></pre>
<p>如果在 <code>setInterval</code> 中执行多个回调函数，那么就可以实现我们的需求。</p>
<p>简单实现一下:</p>
<pre><code class="language-js">class Timer {
    private timerId
    private cbs = []
    private cbId = 0

    constructor(delay) {
        this.delay = delay
    }

    private start() {
        this.timerId = setInterval(() =&gt; {
            this.cbs.forEach(item =&gt; {
                item.cb()
            })
        }, this.delay)
    }

    private stop() {
        clearInterval(this.timerId)
    }

    add(cb) {
        const id = this.cbId++
        this.cbs.push({ cb, id })
        if(!this.timerId) this.start()
        return id
    }

    remove(cbId) {
        const cbIdx = this.cbs.findIndex(({ id }) =&gt; id === cbId)
        this.cbs.splice(cbIdx, 1)
        if(!this.cbs.length) this.stop()
    }
}
</code></pre>
<p>问题又来了，不同的回调函数，可能需要不同的计时间隔，这怎么处理呢？</p>
<p>可以通过一个计数器，计算 <code>setInterval</code> 的执行次数，执行次数 * 间隔时间就是执行总时间，有了执行总时间就好办了，只需要进行余运算即可。</p>
<p>首先设计 cb 对象数据结构</p>
<pre><code class="language-js">interface CallBack {
    id: number   // 回调 id
    cb: () =&gt; any   // 回调函数
    interval: number    // 执行回调间隔
}
</code></pre>
<p>再来实现demo:</p>
<pre><code class="language-js">// some code
let count = 0
let delay = 1000
let cbs: CallBack[] = []
 setInterval(() =&gt; {
    cbs.forEach(({ cb, interval }) =&gt; {
        if(!(count * delay % interval)) {
            cb()
        }
    })
}, delay)
// some code
</code></pre>
<p>上面 demo 中写死了执行间隔为 1000ms，那对于注册了 500ms 执行的回调函数来讲，会延迟 500ms 后才执行。我们可以遍历所有 cbs，从中获取最小的 interval 当做 delay 即可。</p>
<pre><code class="language-js">// some code
const min = this.cbs[0].interval
const delay = this.cbs.reduce((min, cur) =&gt;  cur.interval &lt; min ? cur.interval : min,min)
// some code
</code></pre>
<p>使用时，只需要 new 一个 Timer 实例，在需要倒计时的地方，通过 add 添加回调函数即可自动启动计时器，删除时，调用 remove 方法，删除完所有注册的回调函数，计时器自动停止。</p>
<pre><code class="language-js">const timer = new Timer()

const timerId = timer.add(() =&gt; {}, 1000)
timer.remove(timerId)
</code></pre>
<p>或者再改造一下，实现类似 <code>setTimeout</code> 和 <code>setInterval</code> 的调用方式</p>
<pre><code class="language-js">const setTimeoutInterval = timer.add.bind(timer)
const clearTimeoutInterval = timer.remove.bind(timer)
</code></pre>
<p>调用</p>
<pre><code class="language-js">const timer = setTimeoutInterval(() =&gt; {
    // some code
})

clearTimeoutInterval(timerId)
</code></pre>
<p>改造后的倒计时性能无疑好了许多，页面不再卡顿。且无论添加多少个计时回调，它运行的都是同一个计时实例。</p>
<p>使用 <code>setInterval</code> 的计时还是越来越不准，<code>setInterval</code> 会将回调函数间隔插入 JS 线程中，但线程如果正在执行耗时任务，插入的回调函数将偏移其应当在的位置，滞后执行，下一次插入的位置，参照了滞后插入的位置，所以导致运行时间越长，偏差越大。</p>
<p>使用递归 <code>setTimeout</code> ，不断修正将回调函数插入线程的时间，即可获得相对准确的倒计时。</p>
<p>简单实现一下:</p>
<pre><code class="language-js">let count = 0 // 递归次数
let now = Date.now() // 初始执行时间

function countdown() {
    const offset = Date.now() - (now + count * 1000)
    const nextTime = 1000 - offset
    count++

    setTimeout(() =&gt; {
        countdown()
    }, nextTime)
}
countdown()
</code></pre>
<p>这里我们记录了初始执行时间，和 countdown 递归执行的次数，根据这两者，我们可以计算出偏移时间和下次 <code>setTimeout</code> 的时间。</p>
<p>改造后，虽然倒计时准确了许多。但，又回到了上面的问题，列表项越多， <code>setTimeout</code> 实例越多，页面也会越来越卡。</p>
<p>我们可以使用 <code>setTimeout</code> 模拟 <code>setinterval</code>，并将其替换到上面我们的 <code>Timer</code> 类中。即可解决问题。</p>
<pre><code class="language-js">function timeoutInterval(cb, interval = 1000， getTimerId) {
  let count = 0
  let now = Date.now()
  let timerId = null

  function countdown() {
    const offset = Date.now() - (now + count * interval)
    const nextTime = interval - offset
    count++

    timerId = setTimeout(() =&gt; {
      countdown()
      cb()
    }, nextTime)

    getTimerId(timerId)
  }

  countdown()
}
</code></pre>
<p>这里值得注意的是，由于我们这里使用递归 <code>setTimeout</code>, 所以每次生成的 <code>timeId</code> 都是不一样的，所以设计将其通过 <code>cb</code> 回调函数的参数传出。</p>
<p>用法如下:</p>
<pre><code class="language-js">let i = 0
timeoutInterval(
    () =&gt; {
    // do something
    }, 
    1000,
    (timerId) =&gt; {
        this.timerId = timerId
    }
)
</code></pre>
<p>将其替换到 <code>Timer</code> 类中</p>
<pre><code class="language-js">class Timer {
    // some code
    private start() {
        timeoutInterval(
            () =&gt; {
                this.cbs.forEach(item =&gt; {
                    item.cb()
                })
            }, 
            1000,
            (timerId) =&gt; {
                this.timerId = timerId
            }
        )
    }
    // some code
}
</code></pre>
<p>改造后的倒计时性能良好，且因为只有一个计时实例，页面也不会卡顿。</p>
<p>具体实现请查阅代码: <a href="https://github.com/xdoer/TimeoutInterval">TimeoutInterval</a></p>
<p>对于一些秒杀抢购场景，这种倒计时是有问题的，因为本地时间与服务器时间有偏差，如果抢购单纯由前端倒计时来控制，那么很容易出现用户修改本机时间，页面就出现了购买按钮可以直接购买的 bug。由本地计时引起的 bug，在目前市面上的 APP 上很常见，除了抢购场景外，接口防重放机制中会校验客户端请求携带的时间戳，通常约定，如果客户端请求的时间戳与服务端时间偏差在 60s 之外，则该请求无效，所以在修改本机时间后，打开某些 APP，会看到空白页面。</p>
<p>解决办法很简单。</p>
<p>打开应用后，首先将客户端与服务端的偏移时间存到本地，秒杀倒计时的时候，将偏移时间加上即可。这样的话，无论客户端时间是提前还是之后，都对应用没有影响。</p>
<p>简单写个 demo:</p>
<pre><code class="language-js">// 首先获取偏移时间
prequest('/api').then(res =&gt; {
    // nginx 服务器，可以从响应头拿到时间
    const date = res.headers.Date
    const offsetTime = Date.now() - new Date(date).getTime()
    localStorage.setItem('offsetTime', offsetTime)
})

// 封装获取时间方法
function getNow() {
    const offset = localStorage.getItem('offsetTime')
    return Date.now() + Number.parseInt(offset)
}
</code></pre>
<p>回到我们的计时器代码，只需要将其中的 <code>Date.now()</code> 方法替换成 这里的 <code>getNow()</code> 即可。</p>
<p>到目前为止，上面的代码已经可以应对大部分计时场景，但对于秒杀场景来说，本地运行的倒计时可能还是不够可靠，可以设计间歇性请求接口获取服务端时间，更新倒计时，来获得更高计时精确度。</p>
<p>首先大致设计获取服务端时间方法</p>
<pre><code class="language-js">async function getServerTime() {
    const start = Date.now()    // 开启请求时间
    const serverTime = await prequest('/api').then(res =&gt; ...)
    const endTime = Date.now()
    return serverTime + (endTime - startTime) / 2
}
</code></pre>
<p>这里考虑了请求网络消耗的时间。</p>
<p>其次考虑我们倒计时，当每次拿到服务端时间后，加上 <code>interval</code> 时间，判断是否和目标时间相等即可。</p>
<p>demo如下</p>
<pre><code class="language-js">let now = Date.now()
let interval = 1000
setInterval(() =&gt; {
    if (now + interval &gt;=  endTime) {
        // some code
    }
}, interval)

setInterval(() =&gt; {
    getServerTime(res).then(res =&gt; now = res)
}, 5000)
</code></pre>
<p>这里我们维护了两个计时器，一个负责请求接口更新 <code>now</code> 数据，一个进行正常倒计时，写我们的业务逻辑。</p>
<p>当有 n 多个这样的倒计时实例，代码将不可维护。可以改造一下代码，使用类似事件发布订阅的模式来解决这个问题。</p>
<p>首先实现一个 <code>manager</code> 来实现事件发布订阅的逻辑</p>
<pre><code class="language-js">class CountDowmManager {
    queue = []
    tiemrId = null

    constructor({ getRemoteDate, interval }) {
        this.getRemoteDate = getRemoteDate
        this.interval = interval
    }

    private start() {
        this.timerId = timer.add(() =&gt; {
            this.getNow()
        }, this.interval)
    }

    private stop() {
        timer.remove(this.timerId)
    }

    on (countdown) {
        this.queue.push(countdown)
        if(!this.timerId) this.start()
    }

    off(countdown) {
        this.queue.splice(this.queue.findIndex(i =&gt; i === countdown), 1)
        if(!this.queue.length) this.stop()
    }

    private async getNow() {
        try {
            const start = Date.now()
            const nowStr = await this.opt.getRemoteDate()
            const end = Date.now()
            this.queue.forEach((instance) =&gt; (instance.now = new Date(nowStr).getTime() + (end - start) / 2)
        } catch (e) {
            console.log('fix time fail', e)
        }
    }
}
</code></pre>
<p>在 <code>CountDownManager</code> 类中，维护了一个 <code>countdown</code> 实例的队列，每隔 <code>interval</code> 个时间，会请求接口，更新所有实例的 <code>now</code> 值。同时设计将获取服务器时间的函数由参数传入，已满足不同场景的不同需求。</p>
<p>接着，设计倒计时</p>
<pre><code class="language-js">class CountDown {
    now = Date.now()
    timerId = null

   // ... some code
    start() {
        this.timerId = timer.add(() =&gt; {
            this.now += interval

            if (this.now &gt;= endTime) {
                // some code
                return
            }
        })
    }

    // some code
}
</code></pre>
<p>用法如下:</p>
<pre><code class="language-js">const manager = new CountDownManager()

const instance1 = new CountDown()
const instance2 = new CountDown()

manager.on(instance1) 
manager.on(instance2)
</code></pre>
<p>上面的 <code>CounDown</code>  代码中，只考虑了使用 <code>server</code> 更新时间的场景，其实我们也可以将上面使用本地时间进行的倒计时，整合到 <code>countDown</code> 类中。其次，可以设计将 <code>manager</code> 作为参数，传入到 <code>countdown</code> 实例，这样做的好处在于，我们不需要手动的注册和移除 <code>countdown</code> 实例，将 <code>managr</code> 当参数传入，在初始化实例时，就可以自动将当前实例注册；当倒计时结束，自动将当前实例移除。我们还可以根据是否传入 <code>manager</code> 来判断是否需要使用服务端来更新时间。</p>
<p>改造一下代码</p>
<pre><code class="language-js">class CountDown() {

    constructor({ manager, ...opt }) {
        this.manager = manager
        manager ? this.useServerToCountDown(...opt) : this.useLocalToCountDown(...opt)
    }

    useServerToCountDown() {
        // ...some code
        this.manager.on(this)
    }

    // ...some code

    clear() {
        timer.clear(this.timer)
        if(this.manager) {
            this.manager.off(this)
        }
    }
}
</code></pre>
<p>至此，我们就完成了一个高性能，好扩展，易用的计时器了。</p>
<p>完整代码请查阅 <a href="https://github.com/xdoer/CountDown">CountDown</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[想到的一些很好的面试题]]></title>
        <id>https://aiyou.life/post/4XYWTWTx/</id>
        <link href="https://aiyou.life/post/4XYWTWTx/">
        </link>
        <updated>2021-05-30T07:32:50.000Z</updated>
        <summary type="html"><![CDATA[<p>写代码的时候，想到的和遇到的一些问题。想来可以做面试题。特记录于此。</p>
]]></summary>
        <content type="html"><![CDATA[<p>写代码的时候，想到的和遇到的一些问题。想来可以做面试题。特记录于此。</p>
<!-- more -->
<h2 id="对象">对象</h2>
<p>1、<code>{} === {}</code> 是否相等？<br>
2、<code>obj.a === obj.a</code> 是否相等?</p>
<pre><code class="language-ts">const obj = {
    a: {}
}
</code></pre>
<p>3、怎样使 <code>obj.a !== obj.a</code></p>
<pre><code class="language-ts">const obj = {
    get a() {
        return {}
    }
}
</code></pre>
<p>4、<code>obj.a === obj.a</code> 是否相等? <code>obj.a</code> 访问到的是哪一个？</p>
<pre><code class="language-ts">const obj = {
    a: {}
    get a() {
        return {}
    }
}
</code></pre>
<p>5、<code>getter</code> 访问与访问器访问有何区别？<br>
getter 可定义在实例和类上，值为一个无参数的函数，可以惰性赋值。</p>
<p>6、<code>getter</code> 访问与访问器存在相同属性的情况下，如何通过<code>getter</code>访问</p>
<pre><code class="language-ts">const obj = {
    a: {}
    get a() {
        return {}
    }
}
</code></pre>
<p>当在实例上定义 <code>getter</code> 访问，则 <code>getter</code> 存在于实例上。虽然可以定义同名属性，但却访问不到 。</p>
<p>使用 <code>delete obj.a</code> 将会都删掉。</p>
<p>可以考虑将其定义到原型上。</p>
<pre><code class="language-ts">class A {
    a = 1
    get a() {
        return 2
    }
}
const obj = new A()

obj.a === 1 // true
obj.__proto__a === 2 // true

delete obj.a

obj.a === 2 // true
</code></pre>
<p>7、<code>arr[0] === null</code> 是否相等？为什么?</p>
<pre><code class="language-ts">const obj = { a: 1 }
const arr = [obj]
obj = null
</code></pre>
<p>8、<code>arr.get(obj) === null</code> 是否相等？为什么？</p>
<pre><code class="language-ts">let obj = { a: 1 }
const map = new WeakMap()
map.set(obj, { a: 1 })
obj = null
</code></pre>
<p>9、a, b, c 的区别？如何在 class 写法上的原型上定义值？</p>
<pre><code class="language-ts">class A {
    a = 1

    constructor() {
        this.b = 2
    }

    c() {
        return 3
    }
}
</code></pre>
<p>a, b, c 的区别？如何在原型上定义值？</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[由封装一个请求库所想到的]]></title>
        <id>https://aiyou.life/post/M4RcI3wfU/</id>
        <link href="https://aiyou.life/post/M4RcI3wfU/">
        </link>
        <updated>2021-05-06T07:32:44.000Z</updated>
        <summary type="html"><![CDATA[<p>是否有一种方式，从底向上的，针对不同的请求内核可以很方便的为其赋予请求库拦截器、中间件、快捷请求等几个通用功能，并且保留不同请求内核的差异化？</p>
]]></summary>
        <content type="html"><![CDATA[<p>是否有一种方式，从底向上的，针对不同的请求内核可以很方便的为其赋予请求库拦截器、中间件、快捷请求等几个通用功能，并且保留不同请求内核的差异化？</p>
<!-- more -->
<h2 id="前言">前言</h2>
<p>最近想写一个可以适配多平台的请求库，在研究 xhr 和 fetch 发现二者的参数、响应、回调函数等差别很大。想到如果请求库想要适配多平台，需要统一的传参和响应格式，那么势必会在请求库内部做大量的判断，这样不但费时费力，还会屏蔽掉底层请求内核差异。</p>
<p>阅读 axios 和 umi-request 源码时想到，请求库其实基本都包含了拦截器、中间件和快捷请求等几个通用的，与具体请求过程无关的功能。然后通过传参，让用户接触底层请求内核。问题在于，请求库内置多个底层请求内核，内核支持的参数是不一样的，上层库可能做一些处理，抹平一些参数的差异化，但对于底层内核的特有的功能，要么放弃，要么只能在参数列表中加入一些具体内核的特有的参数。比如在 axios 中，它的请求配置参数列表中，罗列了一些 <a href="https://axios-http.com/docs/req_config">browser only</a>的参数，那对于只需要在 node 环境中运行的 axios 来说，参数多少有些冗余，并且如果 axios 要支持其他请求内核(比如小程序、快应用、华为鸿蒙等)，那么参数冗余也将越来越大，扩展性也差。</p>
<p>换个思路来想，既然实现一个适配多平台的统一的请求库有这些问题，那么是否可以从底向上的，针对不同的请求内核，提供一种方式可以很方便的为其赋予拦截器、中间件、快捷请求等几个通用功能，并且保留不同请求内核的差异化？</p>
<h2 id="设计实现">设计实现</h2>
<p>我们的请求库要想与请求内核无关，那么只能采用内核与请求库相分离的模式。使用时，需要将请求内核传入，初始化一个实例，再进行使用。或者基于请求库，传入内核，预置请求参数来进行二次封装。</p>
<h3 id="基本架构">基本架构</h3>
<p>首先实现一个基本的架构</p>
<pre><code class="language-ts">class PreQuest {
    constructor(private adapter)
    
    request(opt) {
        return this.adapter(opt)
    }
}

const adapter = (opt) =&gt; nativeRequestApi(opt)
// eg: const adapter = (opt) =&gt; fetch(opt).then(res =&gt; res.json())

// 创建实例
const prequest = new PreQuest(adapter)

// 这里实际调用的是 adapter 函数
prequest.request({ url: 'http://localhost:3000/api' })
</code></pre>
<p>可以看到，这里饶了个弯，通过实例方法调用了 adapter 函数。</p>
<p>这样的话，为修改请求和响应提供了想象空间。</p>
<pre><code class="language-ts">class PreQuest {
    // ...some code
    
    async request(opt){
        const options = modifyReqOpt(opt)
        const res = await this.adapter(options)
        return modifyRes(res)
    }

    // ...some code
}
</code></pre>
<h3 id="中间件">中间件</h3>
<p>可以采用 koa 的洋葱模型，对请求进行拦截和修改。</p>
<p>中间件调用示例:</p>
<pre><code class="language-ts">const prequest = new PreQuest(adapter)

prequest.use(async (ctx, next) =&gt; {
    ctx.request.path = '/perfix' + ctx.request.path
    await next()
    ctx.response.body = JSON.parse(ctx.response.body)
})
</code></pre>
<p>实现中间件基本模型？</p>
<pre><code class="language-ts">class Middleware {
    // 中间件列表
    cbs = []
    
    // 注册中间件
    use(cb) {
       this.cbs.push(cb)
       return this
    }
    
    // 执行中间件
    exec(ctx, next){

        let times = -1
    
        const dispatch = (pointer = 0): Promise&lt;any&gt; =&gt; {
            if (cbs.length &lt; pointer) return Promise.resolve()

            const fn = this.cbs[pointer] || next

            if (pointer &lt;= times) throw new Error('next function only can be called once')
             // 确保每个中间价中 next 方法只调用一次
             times = pointer

            // 洋葱模型
             return fn(ctx, () =&gt; dispatch(++pointer))
        }

        return dispatch()
    }
}
</code></pre>
<p>全局中间件，只需要添加一个 use 和 exec 的静态方法即可。</p>
<p>PreQuest 继承自 Middleware 类，即可在实例上注册中间件。</p>
<p>那么怎么在请求前调用中间件?</p>
<pre><code class="language-ts">class PreQuest extends Middleware {
    // ...some code
     
    async request(opt) {
    
        const ctx = {
            request: opt,
            response: {}
        }
        
        // 执行中间件
        async this.exec(ctx, async (ctx) =&gt; {
            ctx.response = await this.adapter(ctx.request)
        })
        
        return ctx.response
    }
        
    // ...some code
}

</code></pre>
<p>中间件模型中，前一个中间件的返回值是传不到下一个中间件中，所以是通过一个对象在中间件中传递和赋值。</p>
<h3 id="拦截器">拦截器</h3>
<p>拦截器是修改参数和响应的另一种方式。</p>
<p>首先看一下 axios 中拦截器是怎么用的。</p>
<pre><code class="language-ts">import axios from 'axios'

const instance = axios.create()

instance.interceptor.request.use(
    (opt) =&gt; modifyOpt(opt),
    (e) =&gt; handleError(e)
)
</code></pre>
<p>根据用法，我们可以实现一个基本结构</p>
<pre><code class="language-ts">class Interceptor {
    cbs = []
    
    // 注册拦截器
    use(successHandler, errorHandler) {
        this.cbs.push({ successHandler, errorHandler })
    }
    
    exec(opt) {
      return this.cbs.reduce(
        (t, c, idx) =&gt; t.then(c.successHandler, this.handles[idx - 1]?.errorHandler),
        Promise.resolve(opt)
      )
      .catch(this.handles[this.handles.length - 1].errorHandler)
    }
}
</code></pre>
<p>代码很简单，有点难度的就是拦截器的执行了。这里主要有两个知识点: Array.reduce 和 Promise.then 第二个参数的使用。</p>
<p>注册拦截器时，<code>successHandler</code> 与 <code>errorHandler</code> 是成对的， successHandler 中抛出的错误，要在对应的 errorHandler 中处理，所以 errorHandler 接收到的错误，是上一个拦截器中抛出的。</p>
<p>拦截器怎么使用呢?</p>
<pre><code class="language-ts">class PreQuest {
    // ... some code
    interceptor = {
        request: new Interceptor()
        response: new Interceptor()
    }
    
    // ...some code
    
    async request(opt){
        
        // 执行拦截器，修改请求参数
        const options = await this.interceptor.request.exec(opt)
        
        const res = await this.adapter(options)
        
        // 执行拦截器，修改响应数据
        const response = await this.interceptor.response.exec(res)
        
        return response
    }
    
}
</code></pre>
<h3 id="拦截器中间件">拦截器中间件</h3>
<p>拦截器也可以是一个中间件，可以通过注册中间件来实现。请求拦截器在 <code>await next()</code> 前执行，响应拦截器在其后。</p>
<pre><code class="language-ts">const instance = new Middleware()

instance.use(async (ctx, next) =&gt; {
    // Promise 链式调用，更改请求参数
    await Promise.resolve().then(reqInterceptor1).then(reqInterceptor2)...
    // 执行下一个中间件、或执行到 this.adapter 函数
    await next()
    // Promise 链式调用，更改响应数据
    await Promise.resolve().then(resInterceptor1).then(resInterceptor2)...
})
</code></pre>
<p>拦截器有请求拦截器和响应拦截器两类。</p>
<pre><code class="language-ts">class InterceptorMiddleware {
    request = new Interceptor()
    response = new Interceptor()
    
    // 注册中间件
    register: async (ctx, next) {
        ctx.request = await this.request.exec(ctx.request)
        await next()
        ctx.response = await thie.response.exec(ctx.response)
    }
}
</code></pre>
<p>使用</p>
<pre><code class="language-ts">const instance = new Middleware()
const interceptor = new InterceptorMiddleware()

// 注册拦截器
interceptor.request.use(
    (opt) =&gt; modifyOpt(opt),
    (e) =&gt; handleError(e)
)

// 注册到中间中
instance.use(interceptor.register)
</code></pre>
<h3 id="类型请求">类型请求</h3>
<p>这里我把类似 <code>instance.get('/api')</code> 这样的请求叫做类型请求。库中集成类型请求的话，难免会对外部传入的adapter 函数的参数进行污染。因为需要为请求方式 <code>get</code> 和路径 <code>/api</code> 分配键名，并且将其混入到参数中，通常在中间件中会有修改路径的需求。</p>
<p>实现很简单，只需要遍历 HTTP 请求类型，并将其挂在 this 下即可</p>
<pre><code class="language-ts">class PreQuest {
    constructor(private adapter) {
        this.mount()
    }
    
    // 挂载所有类型的别名请求
    mount() {
       methods.forEach(method =&gt; {
           this[method] = (path, opt) =&gt; {
             // 混入 path 和 method 参数
             return this.request({ path, method, ...opt })
           }
       })
    }
    
    // ...some code

    request(opt) {
        // ...some code
    }
}

</code></pre>
<h3 id="简单请求">简单请求</h3>
<p>axios 中，可以直接使用下面这种形式进行调用</p>
<pre><code class="language-ts">axios('http://localhost:3000/api').then(res =&gt; console.log(res))
</code></pre>
<p>我将这种请求方式称之为简单请求。</p>
<p>我们这里怎么实现这种写法的请求方式呢？</p>
<p>不使用 class ，使用传统函数类写法的话比较好实现，只需要判断函数是否是 new 调用，然后在函数内部执行不同的逻辑即可。</p>
<p>demo 如下</p>
<pre><code class="language-ts">function PreQuest() {
    if(!(this instanceof PreQuest)) {
        console.log('不是new 调用')
        return // ...some code
    }
   
   console.log('new调用') 
   
   //... some code
}

// new 调用
const instance = new PreQuest(adapter)
instance.get('/api').then(res =&gt; console.log(res))

// 简单调用
PreQuest('/api').then(res =&gt; console.log(res))
</code></pre>
<p>class 写法的话，不能进行函数调用。我们可以在 class 实例上做文章。</p>
<p>首先初始化一个实例，看一下用法</p>
<pre><code class="language-ts">const prequest = new PreQuest(adapter)

prequest.get('http://localhost:3000/api')

prequest('http://localhost:3000/api')
</code></pre>
<p>通过 new 实例化出来的是一个对象，对象是不能够当做函数来执行，所以不能用 new 的形式来创建对象。</p>
<p>再看一下 axios 中生成实例的方法 <code>axios.create</code>, 可以从中得到灵感，如果 <code>.create</code> 方法返回的是一个函数，函数上挂上了所有 new 出来对象上的方法，这样的话，就可以实现我们的需求。</p>
<p>简单设计一下:</p>
<p>方式一: 拷贝原型上的方法</p>
<pre><code class="language-ts">class PreQuest {

    static create(adapter) {
        const instance = new PreQuest(adapter)
        
        function inner(opt) {
           return instance.request(opt)
        }
        
        for(let key in instance) {
            inner[key] = instance[key]
        }
        
        return inner
    }
}
</code></pre>
<p><strong>注意: 在某些版本的 es 中，<code>for in</code> 循环遍历不出 class 生成实例原型上的方法。</strong></p>
<p>方式二: 还可以使用 Proxy 代理一个空函数，来劫持访问。</p>
<pre><code class="language-ts">class PreQuest {
    
    // ...some code

    static create(adapter) {
        const instance = new PreQuest(adapter)
       
        return new Proxy(function (){}, {
          get(_, name) {
            return Reflect.get(instance, name)
          },
          apply(_, __, args) {
            return Reflect.apply(instance.request, instance, args)
          },
        })
    }
}
</code></pre>
<p>上面两种方法的缺点在于，通过 <code>create</code> 方法返回的将不再是 <code>PreQuest</code> 的实例，即</p>
<pre><code class="language-ts">const prequest = PreQuest.create(adapter)

prequest instanceof PreQuest  // false
</code></pre>
<p>个人目前还没有想到，判断 <code>prequest</code> 是不是 <code>PreQuest</code> 实例有什么用，并且也没有想到好的解决办法。有解决方案的请在评论里告诉我。</p>
<p>使用 <code>.create</code> 创建 '实例' 的方式可能不符合直觉，我们还可以通过 Proxy 劫持 new 操作。</p>
<p>Demo如下:</p>
<pre><code class="language-ts">class InnerPreQuest {
  create() {
     // ...some code
  }
}

const PreQuest = new Proxy(InnerPreQuest, {
    construct(_, args) {
        return () =&gt; InnerPreQuest.create(...args)
    }
})
</code></pre>
<h3 id="请求锁">请求锁</h3>
<p>如何实现在请求接口前，先拿到 token 再去请求？</p>
<p>下面的例子中，页面同时发起多个请求</p>
<pre><code class="language-ts">const prequest = PreQuest.create(adapter)

prequest('/api/1').catch(e =&gt; e)     // auth fail
prequest('/api/2').catch(e =&gt; e)    // auth fail
prequest('/api/3').catch(e =&gt; e)    // auth fail
</code></pre>
<p>首先很容易想到，我们可以使用中间件为其添加 token</p>
<pre><code class="language-ts">prequest.use(async (ctx, next) =&gt; {
    ctx.request.headers['Authorization'] = `bearer ${token}`
    await next()
})
</code></pre>
<p>但 token 值从何而来？token 需要请求接口得来，并且需要重新创建请求实例，以避免重新走添加 token 的中间件的逻辑。</p>
<p>简单实现一下</p>
<pre><code class="language-ts">const tokenRequest = PreQuest.create(adapter)

let token = null
prequest.use(async (ctx, next) =&gt; {
    if(!token) {
        token = await tokenRequest('/token')
    }
    ctx.request.headers['Authorization'] = `bearer ${token}`
    await next()
})
</code></pre>
<p>这里使用了 token 变量，来避免每次请求接口，都去调接口拿 token。</p>
<p>代码乍一看没有问题，但仔细一想，当同时请求多个接口，tokenRequest 请求还没有得到响应时，后面的请求又都走到这个中间件，此时 token 值为空，会造成多次调用 tokenRequest。那么如何解决这个问题？</p>
<p>很容易想到，可以加个锁机制来实现</p>
<pre><code class="language-ts">let token = null
let pending = false
prequest.use(async (ctx, next) =&gt; {
    if(!token) {
        if(pending) return
        pending = true
        token = await tokenRequest('/token')
        pending = flase
    }
    ctx.request.headers['Authorization'] = `bearer ${token}`
    await next()
})
</code></pre>
<p>这里我们加了 pending 来判断 tokenRequest 的执行，成功解决了 tokenRequest 执行多次的问题，但又引入了新的问题，在执行 tokenRequest 时，后面到来的请求应当怎么处理？上面的代码，直接 return 掉了，请求将被丢弃。实际上，我们希望，请求可以在这里暂停，当拿到 token 时，再请求后面的中间件。</p>
<p>暂停，我们也可以很容想到使用 async、await 或者 promise 来实现。但在这里如何用呢？</p>
<p>我从 axios 的 <a href="https://github.com/axios/axios/blob/e9965bfafc82d8b42765705061b9ebe2d5532493/lib/cancel/CancelToken.js#L17">cancelToken</a> 实现中得到了灵感。axios 中，利用 promise 简单实现了一个状态机，将 Promise 中的 resolve 赋值到外部局部变量，实现对 promise 流程的控制。</p>
<p>简单实现一下</p>
<pre><code class="language-ts">let token = null
let pending = false
let resolvePromise
let promise = new Promise((resolve) =&gt; resolvePromise = resolve)

prequest.use(async (ctx, next) =&gt; {
    if(!token) {
        if(pending) {
            // promise 控制流程
            token = await promise
        } else {
            pending = true
            token = await tokenRequest('/token')
            // 调用 resolve，使得 promise 可以执行剩余的流程
            resolvePromise(token)
            pending = flase
        }
    } 

    ctx.request.headers['Authorization'] = `bearer ${token}`
    await next()
})
</code></pre>
<p>当执行 tokenRequest 时，其余请求的接口，都会进入到一个 promise 控制的流程中，当 token 得到后，通过外部 resolve, 控制 promise 继续执行，以此设置请求头，和执行剩余中间件。</p>
<p>这种方式虽然实现了需求，但代码丑陋不美观。</p>
<p>我们可以将状态都封装到一个函数中。以实现类似下面这种调用。这样的调用符合直觉且美观。</p>
<pre><code class="language-ts">prequest.use(async (ctx, next) =&gt; {
  const token = await wrapper(tokenRequest)
  ctx.request.headers['Authorization'] = `bearer ${token}`
  await next()
})
</code></pre>
<p>怎么实现这样一个 wrapper 函数？</p>
<p>首先，状态不能封装到 wrapper 函数中，否则每次都会生成新的状态，wrapper 将形同虚设。可以使用闭包函数将状态保存。</p>
<pre><code class="language-ts">function createWrapper() {
    let token = null
    let pending = false
    let resolvePromise
    let promise = new Promise((resolve) =&gt; resolvePromise = resolve)
    return function (fn) {
        if(pending) return promise
        if(token) return token

        pending = true

        token = await fn()

        pending = false
        resolvePromise(token)

        return token
    }
}
</code></pre>
<p>使用时，只需要利用 <code>createWrapper</code> 生成一个 <code>wrapper</code> 即可</p>
<pre><code class="language-ts">const wrapper = createWrapper()

prequest.use(async (ctx, next) =&gt; {
  const token = await wrapper(tokenRequest)
  ctx.request.headers['Authorization'] = `bearer ${token}`
  await next()
})
</code></pre>
<p>这样的话，就可以实现我们的目的。</p>
<p>但，这里的代码还有问题，状态封装在 createWrapper 内部，当 token 失效后，我们将无从处理。</p>
<p>比较好的做法是，将状态从 <code>createWrapper</code> 参数中传入。</p>
<p>代码实现，请参考<a href="https://github.com/xdoer/PreQuest/blob/104c178e7c3a1b8edd8c6d36ad603e880297eba2/packages/lock/src/index.ts#L5">这里</a></p>
<h2 id="实战">实战</h2>
<p>以微信小程序为例。小程序中自带的 <code>wx.request</code> 并不好用。使用上面我们封装的代码，可以很容易的打造出一个小程序请求库。</p>
<h3 id="封装小程序原生请求">封装小程序原生请求</h3>
<p>将原生小程序请求 Promise 化，设计传参 opt 对象</p>
<pre><code class="language-ts">function adapter(opt) {
  const { path, method, baseURL, ...options } = opt
  const url = baseURL + path
  return new Promise((resolve, reject) =&gt; {
    wx.request({
      ...options,
      url,
      method,
      success: resolve,
      fail: reject,
    })
  })
}

</code></pre>
<h3 id="调用">调用</h3>
<pre><code class="language-ts">const instance = PreQuest.create(adapter)

// 中间件模式
instance.use(async (ctx, next) =&gt; {
    // 修改请求参数
    ctx.request.path = '/prefix' + ctx.request.path
    
    await next()
    
    // 修改响应
    ctx.response.body = JSON.parse(ctx.response.body)
})

// 拦截器模式
instance.interecptor.request.use(
    (opt) =&gt; {
        opt.path = '/prefix' + opt.path
        return opt
    }
)

instance.request({ path: '/api', baseURL: 'http://localhost:3000' })

instance.get('http://localhost:3000/api')

instance.post('/api', { baseURL: 'http://loclahost:3000' })
</code></pre>
<h3 id="获取原生请求实例">获取原生请求实例</h3>
<p>首先看一下在小程序中怎样中断请求</p>
<pre><code class="language-ts">const request = wx.request({
    // ...some code
})

request.abort()
</code></pre>
<p>使用我们封装的这一层，将拿不到原生请求实例。</p>
<p>那么怎么办呢？我们可以从传参中入手</p>
<pre><code class="language-ts">function adapter(opt) {
    const { getNativeRequestInstance } = opt
    
    let resolvePromise: any
    getNativeRequestInstance(new Promise(resolve =&gt; (resolvePromise = resolve)))
    
    return new Promise(() =&gt; {
        const nativeInstance = wx.request(
           // some code
        )
        
        resolvePromise(nativeInstance)
    })
}
</code></pre>
<p>用法如下:</p>
<pre><code class="language-ts">const instance = PreQuest.create(adapter)

instance.post('http://localhost:3000/api', {
    getNativeRequestInstance(promise) {
      promise.then(instance =&gt; {
          instance.abort()
      })
    }
})
</code></pre>
<p>需要注意的是：因为 <code>wx.request</code> 的执行是在 n 个中间件、拦截器之后执行的，里面存在大量异步任务，所以通过上面拿到的 <code>instance</code> 只能在异步中执行。</p>
<h3 id="兼容多平台小程序">兼容多平台小程序</h3>
<p>查看了几个小程序平台和快应用，发现请求方式都是小程序的那一套，那其实我们完全可以将 <code>wx.request</code> 拿出来，创建实例的时候再传进去。</p>
<h2 id="结语">结语</h2>
<p>上面的内容中，我们基本实现了一个与请求内核无关的请求库，并且设计了两种拦截请求和响应的方式，我们可以根据自己的需求和喜好自由选择。</p>
<p>这种内核装卸的方式非常容易扩展。当面对一个 axios 不支持的平台时，也不用费劲的去找开源好用的请求库了。我相信很多人在开发小程序的时候，基本都有去找 axios-miniprogram 的解决方案。通过我们的 PreQuest 项目，可以体验到类似 axios 的能力。</p>
<p><a href="https://github.com/xdoer/PreQuest">PreQuest</a> 项目中，除了上面提到的内容，还提供了全局配置、全局中间件、别名请求等功能。项目中也有基于 <code>PreQuest</code> 封装的请求库，<a href="https://github.com/xdoer/PreQuest/tree/main/packages/miniprogram">@prequest/miniprogram</a>,<a href="https://github.com/xdoer/PreQuest/tree/main/packages/fetch">@prequest/fetch</a>...也针对一些使用原生 xhr、fetch 等 API 的项目，提供了一种不侵入的方式来赋予 PreQuest的能力 <a href="https://github.com/xdoer/PreQuest/tree/main/packages/wrapper">@prequest/wrapper</a></p>
<h2 id="参考">参考</h2>
<p><a href="https://github.com/axios/axios">axios</a>: https://github.com/axios/axios</p>
<p><a href="https://github.com/umijs/umi-request">umi-request</a>:https://github.com/umijs/umi-request</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fower: 一个多平台原子类 CSS In JS 样式库]]></title>
        <id>https://aiyou.life/post/ZSut5c_dE/</id>
        <link href="https://aiyou.life/post/ZSut5c_dE/">
        </link>
        <updated>2021-04-28T12:41:50.000Z</updated>
        <summary type="html"><![CDATA[<p>在过去的一年半中，我们团队分别使用了 Taro  React 开发小程序， React 开发 Web 程序 和使用  React Native 开发 App。使用的样式构建也各种各样，并不统一，在小程序中，使用 SCSS，在 Web 中使用 tailwind, 在  React Native 中使用 StyleSheet.create 创建样式。</p>
]]></summary>
        <content type="html"><![CDATA[<p>在过去的一年半中，我们团队分别使用了 Taro  React 开发小程序， React 开发 Web 程序 和使用  React Native 开发 App。使用的样式构建也各种各样，并不统一，在小程序中，使用 SCSS，在 Web 中使用 tailwind, 在  React Native 中使用 StyleSheet.create 创建样式。</p>
<!-- more -->
<p>在这三种写法中来回切换是痛苦的。</p>
<h2 id="简介">简介</h2>
<p>我们从 tailwind 中获得了灵感， 将 tailwind 的原子样式 与  JSX Prop 结合，开发了 Fower。Fower 在  JSX 组件外包装了一层，通过收集整合原子样式属性，生成 className 或者 style 属性，并将其注入到内层组件中。由于 Fower 组件本质是一个  JSX 组件，因而也获得了 VSCode 的智能提示，书写样式时，只需要打个首字母，就可以联想出所有的原子样式，回车即可填充属性，这种开发体验是相当爽的。</p>
<figure data-type="image" tabindex="1"><img src="https://aiyou.life/post-images/1619614139846.png" alt="" loading="lazy"></figure>
<p>在此基础上，Fower 通过附加各种属性后缀，支持了伪类，媒体查询，主题切换，暗黑模式等功能；提供了一些布局属性，可以快速让多子元素垂直、水平居中；也有一些功能属性，可以快速裁剪文字，省略显示；可以通过一个属性，构建出一个方形或者圆；还有功能强劲的 css 属性，让你使用各种子元素选择器。。。除了内置的这些属性，Fower 也提供了相关 API，可以让你可以定制化你自己的属性实现。</p>
<p>我们除了对  React, Taro  React,  React Native 封装了组件包外，还针对 Vue, Svelte 等框架进行了部分兼容和适配，Fower 提供了 VSCode 插件，解决了在  React Like 之外的框架的智能提示。</p>
<p>使用 Fower，基本上<strong>可以让你不用再写烦人的 CSS 文件</strong></p>
<h2 id="对比">对比</h2>
<p>相比于 Tailwind, Fower 的优势是明显的。</p>
<blockquote>
<ul>
<li>VSCode 插件。Tailwind 的使用离不开 VSCode 插件。Fower 在  React Like 框架中，利用 VSCode 智能提示就可以联想出各种属性，在其他框架中，才需要安装 VSCode 插件</li>
<li>开箱即用。Fower 只需要安装对应的框架包，即可直接使用，无需进行繁杂的配置。</li>
<li>体积。对于类似 <code>p1</code>, <code>p2</code> 到 <code>p100</code> 这种属性，Tailwind 中枚举了每一个属性的样式，导致体积异常的庞大。Fower 在  React Like 中属于运行时库，对属性具有编程性，可以动态生成样式，所以体积非常小。在非  React Like 框架中，Fower 通过收集模板的原子属性样式也是动态生成样式。</li>
<li>多端使用。Fower 针对市面上主流的框架进行了针对性适配，你可以在  React, Preact, Vue, Svelte,  React Native, Taro  React 小程序, Remax 小程序等平台使用 Fower。Tailwind 不支持在  React Native 使用，并且在 Taro, Remax 等小程序环境中没有支持。</li>
</ul>
</blockquote>
<p>由于 Fower 是运行时 UI 库，所以相对于 Tailwind 有一定的运行时损耗。但对于设备算力越来越强大的今天，这点损耗可以忽略不计。但 Fower 还是尽可能的使用了各种手段提高运行效率，Fower 内部对所有遍历过的属性进行缓存，极大提高运行速度。</p>
<h2 id="项目">项目</h2>
<p><a href="https://fower.vercel.app/">官方文档（https://fower.vercel.app/）</a></p>
<p><a href="https://github.com/forsigner/fower">项目地址（https://github.com/forsigner/fower）</a></p>
<h2 id="功能一览">功能一览</h2>
<p>下面演示了使用 Fower/react 框架包的 Box 组件编写的 demo。实际上，直接使用 Box 标签也是可以用的，但需要额外的配置。</p>
<h3 id="基本使用"><a href="https://fower.vercel.app/zh-cn/docs/basic">基本使用</a></h3>
<p>Fower 提供了大量的原子样式属性，可以极速构建 UI。</p>
<pre><code class="language-html">&lt;Box text2XL fontBold green500 className=&quot;user&quot; style={{ fontWeight: 'bold' }}&gt;
  Hi, Fower
&lt;/Box&gt;
</code></pre>
<h3 id="可编程动态样式">可编程/动态样式</h3>
<p>你可以通过为属性赋值的方式，来编写动态样式</p>
<pre><code class="language-html">&lt;Box
  text-14
  display=&quot;block&quot;
  color=&quot;red&quot;
  blue={false}
  p-10
  m-10rem
  bg=&quot;red&quot;
  bgRed={true}
  bgBlue={false}
&gt;
  Hi, Fower
&lt;/Box&gt;
</code></pre>
<h3 id="css-属性"><a href="https://fower.vercel.app/zh-cn/docs/css-prop">CSS 属性</a></h3>
<p>Fower 中提供了强大的 CSS 属性，实现了大部分 CSS 的功能。</p>
<pre><code class="language-html">&lt;Box
  text4XL
  css={{
    backgroundColor: '#edf2f7',
    ':hover': {
      backgroundColor: '#feebc8',
    },
    '.title': {
      fontWeight: 'bold',
    },
    span: {
      color: 'deeppink',
    },
  }}
&gt;
  &lt;Box className=&quot;title&quot;&gt;Nested demo&lt;/Box&gt;
  &lt;span&gt;Hi, Fower!&lt;/span&gt;
&lt;/Box&gt;
</code></pre>
<h3 id="伪类响应式"><a href="https://fower.vercel.app/zh-cn/docs/pseudo">伪类/响应式</a></h3>
<p>Fower 通过后缀的方式，支持了伪类，响应式等功能</p>
<pre><code class="language-html">&lt;Box text2XL text3XL--hover red--first-child fontBold green500&gt;
  &lt;Box&gt;Hi, Fower&lt;/Box&gt;
&lt;/Box&gt;
&lt;Box textSM textLG--sm text4XL--md text6XL--lg&gt;
  Lorem ipsum dolor sit amet
&lt;/Box&gt;
</code></pre>
<h3 id="颜色助手"><a href="https://fower.vercel.app/zh-cn/docs/color-helper">颜色助手</a></h3>
<p>颜色助手可以快速增加或减少颜色的亮度，透明度等等</p>
<pre><code class="language-html">&lt;Box toEvenly toCenterY&gt;
  &lt;Box red300&gt;normal&lt;/Box&gt;
  &lt;Box red300--D40&gt;darken&lt;/Box&gt;
&lt;/Box&gt;
</code></pre>
<h3 id="主题"><a href="https://fower.vercel.app/zh-cn/docs/theme">主题</a></h3>
<p>Fower 内置了主题。你可以通过 setTheme API 更改和添加配置。</p>
<pre><code class="language-html">import { setTheme } from '@fower/core'

setTheme({
  spacings: {
    10086: 110,
  },
  color: {
    gray10086: '#FFFFFF'
  }
})

&lt;Box textSM bgGray10086 bgGray10086--dark p10086&gt;
  Lorem ipsum dolor sit amet
&lt;/Box&gt;
</code></pre>
<h3 id="与第三方组件库一起使用">与第三方组件库一起使用</h3>
<p>上文中提到 Fower 原理是通过给现有组件包装了一层，通过收集整合原子样式属性，最终将 className 或 style 属性注入到内层组件。因而与第三方组件使用时，只需要利用 styled API 包装即可。</p>
<pre><code class="language-html">import { Button as AntdButton } from 'antd'
import { styled } from '@fower/styled'

const Button = styled(AntdButton)

&lt;Button red300 red400={false} text={7 + 7}&gt;
  normal
&lt;/Button&gt;
</code></pre>
<h3 id="属性冲突">属性冲突</h3>
<p>Fower 组件提供的属性与三方属性冲突时，Fower 也提供了解决方案。</p>
<pre><code class="language-html">import { Button as AntdButton } from 'antd'
import { styled } from '@fower/styled'

const Button = styled(AntdButton)

&lt;Button excludedProps={['block']} block&gt;
  normal
&lt;/Button&gt;
</code></pre>
<h3 id="类名">类名</h3>
<p>Fower 同样支持了 tailwind 的用法</p>
<pre><code class="language-html">&lt;Box className=&quot;toCenter square-400 bgRed400&quot;&gt;
  &lt;Box className=&quot;white&quot;&gt;Lorem ipsum&lt;/Box&gt;
&lt;/Box&gt;
</code></pre>
<h3 id="动画">动画</h3>
<p>Fower 提供了 keyframes API，可以快速创建动画。</p>
<pre><code class="language-html">import { Box } from '@fower/react';
import { keyframes } from '@fower/core';

const bounce = keyframes({
  'from, 20%, 53%, 80%, to': {
    transform: 'translate3d(0,0,0)',
    padding: 10,
  },
    '40%, 43%': {
    transform: 'translate3d(0, -30px, 0)',
  },
})

&lt;Box
  text-30
  css={{
    animation: `${bounce} 1s ease infinite`,
  }}
&gt;
  40 Lorem ipsum dolor sit amet
&lt;/Box&gt;
</code></pre>
<h3 id="扩展">扩展</h3>
<p>Fower 提供了 <a href="https://fower.vercel.app/zh-cn/docs/add-atom">addAtom</a> API 可以快速扩展原子样式属性。但这只能在自己的项目中使用。</p>
<p>Fower 提供了灵活的插件机制，你可以编写自己的样式 Util，供他人使用。</p>
<pre><code class="language-html">import { setConfig } from '@fower/core';
import ellipsis from 'fower-plugin-ellipsis';

setConfig({
  plugin: [ellipsis],
});
</code></pre>
<h2 id="结语">结语</h2>
<p>经过团队半年的不懈努力，Fower 日渐完善，我们也在项目中积极使用。目前在我们小程序项目中做到了仅有一个 app.scss 样式文件的地步。我们封装了很多框架包，也在积极测试与使用，但难免会遇到很多 Bug，希望大家积极试用使用 Fower，也希望 Fower 项目能够真正的帮助你解决样式开发的痛点。谢谢大家。</p>
<figure data-type="image" tabindex="2"><img src="https://aiyou.life/post-images/1619618374404.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Taro小程序开发提升效率的几点分享-路由篇]]></title>
        <id>https://aiyou.life/post/FkN_iGcYQ/</id>
        <link href="https://aiyou.life/post/FkN_iGcYQ/">
        </link>
        <updated>2020-09-22T13:00:12.000Z</updated>
        <summary type="html"><![CDATA[<p>我们都知道，小程序开发一个页面，首先要在 pages 文件夹在新建文件夹，然后在 appConfig 中配置页面完整的路径地址，在进行路由跳转时，还需要在 navigateTo 中写下完整的页面路径。当页面数量少，代码量小时，似乎可以接受，但当代码量大，项目存在好几个分包时，页面跳转路径会变得非常长，书写页面路径会变得越来越困难，代码也不够美观和直观。解析路由参数时，还需要经过几步转换才能得到。。</p>
]]></summary>
        <content type="html"><![CDATA[<p>我们都知道，小程序开发一个页面，首先要在 pages 文件夹在新建文件夹，然后在 appConfig 中配置页面完整的路径地址，在进行路由跳转时，还需要在 navigateTo 中写下完整的页面路径。当页面数量少，代码量小时，似乎可以接受，但当代码量大，项目存在好几个分包时，页面跳转路径会变得非常长，书写页面路径会变得越来越困难，代码也不够美观和直观。解析路由参数时，还需要经过几步转换才能得到。。</p>
<!-- more -->
<h2 id="环境">环境</h2>
<p>基础环境: taro 3.0.5 / react 16.10.0 / typescript 4.1.0</p>
<p>技术栈: React Hooks</p>
<h2 id="路由部分">路由部分</h2>
<p>Taro 小程序路由方法调用示例</p>
<p>路由跳转</p>
<pre><code class="language-typescript">navigateTo({
  url: `/package-appointment/pages/manage-appointments/index?roomId=${roomId}&amp;appointmentId=${appointmentId}&amp;scriptId=${scriptId}`
})
</code></pre>
<p>参数解析</p>
<pre><code class="language-typescript">const { params } = useRouter()
const { roomId, appointmentId, scriptId } = params
const oRoomId = Number.parseInt(roomId)
const oAppointmentId = Number.parseInt(appointmentId)
const oScriptId = Number.parseInt(scriptId)
</code></pre>
<h2 id="优化方案">优化方案</h2>
<h3 id="part-1-路由表文件">PART 1 路由表文件</h3>
<p>新建一个路由表文件 routeTable.ts，为路径命名。</p>
<pre><code class="language-typescript">export enum URLs {
  INDEX = '/pages/index/index',
  MANAGE_APPOINTMENTS = '/package-appointment/pages/manage-appointments/index',
  INTENT_DETAIL = '/package-intent/pages/intent-detail/index'
}
</code></pre>
<p>调用时，只需要引入路由表文件</p>
<pre><code class="language-typescript">import { URLs } from '@/common/routeTable'
...
navigateTo({
  url: `${URLs.MANAGE_APPOINTMENTS}?roomId=${roomId}&amp;appointmentId=${appointmentId}&amp;scriptId=${scriptId}`
})
...
</code></pre>
<p>引入了路由表文件的同时，引入了新的问题，新建一个页面要维护两个路由地址文件，一个是 app.config ，另一个就是路由表文件 routeTable。增加了维护成本，同时两个文件，只要有一点错误，页面就不能正确的被访问。怎么处理这个问题？</p>
<h3 id="part-2-脚本更新路由表与相关配置">PART 2 脚本更新路由表与相关配置</h3>
<p>无论 app.config 路径配置还是路由表配置，页面与路径是对应关系，我们可以写一个脚本去处理问题。首先扫描源码文件夹，通过正则表达式找到 pages 和 package- 下的所有页面。找到文件后，获取文件夹名称作为路由表的 shortName, 构造数据后即可替换和新建到 app.config 和 routeTable 中。</p>
<p>除此之外，还可以顺带把 project.config.json 中 miniprogram 字段更新，用于开发页面进行快捷调试。</p>
<p>脚本完成之后，每次开发页面时，只需要在 pages 目录下或者分包 pages 目录下新建目录，运行脚本命令即可自动更新 app.config 、 project.config 和 routeTable。</p>
<p>注意:</p>
<blockquote>
<ul>
<li>查找页面文件，默认 pages 下的一级目录为所有页面文件，这里需要开发者拥有良好的开发习惯，写的页面没有进行嵌套。</li>
<li>脚本代码很简单，就不新建仓库了，完整代码已经贴到了最下面</li>
</ul>
</blockquote>
<h3 id="part-3-地址参数改造">PART 3 地址参数改造</h3>
<p>观察 PART 1 部分的代码，其实可以看到，虽然通过路由表形式缩短了一部分地址的长度，但是参数部分还可以做些文章。</p>
<pre><code class="language-typescript">// queryParams 封装
const covertObjToSearchParams = (searchObj: commonObjectProps = {}) =&gt; {
  let searchParams = ''
  for (let i in searchObj) {
    searchParams = searchParams + `${i}=${searchObj[i]}&amp;`
  }
  return searchParams.slice(0, -1)
}

const queryParams = covertObjToSearchParams({ roomId, appointmentId, scriptId })

navigateTo({
  url: `${URLs.MANAGE_APPOINTMENTS}?${queryParams}`
})

</code></pre>
<p>通过这种方式传递参数，简洁直观，方便不少。</p>
<h3 id="part-4-路由跳转方法改造">PART 4 路由跳转方法改造</h3>
<p>小程序中的方法大都都是通过一个对象传递的参数，这是因为大多数方法都有很多参数，通过对象传参则显得代码整洁友好。观察我们的代码，用到的最多的就是一个 url 参数, 那我们完全可以直接将地址放到第一个参数位上。</p>
<p>navigateTo 方法改造</p>
<pre><code class="language-typescript">import { navigateTo as originNavigateTo } from '@tarojs/taro'

export function navigateTo(url: string, params?: commonObjectProps, opt?: commonObjectProps) {
  if (!params) return originNavigateTo({ url, ...opt })

  const _url = `${url}?${covertObjToSearchParams(params)}`
  originNavigateTo({ url: _url, ...opt })
}
</code></pre>
<p>navigateTo 调用</p>
<pre><code class="language-typescript">navigateTo(URLs.MANAGE_APPOINTMENTS, { roomId, appointmentId, scriptId })`
</code></pre>
<p>相比前文中的最开始时的路由调用，这里更加简洁明了</p>
<h3 id="part-5-路由参数解析方法改造">PART 5 路由参数解析方法改造</h3>
<p>Taro 中提供了 <strong>useRouter</strong> hooks去解析路由参数，但该 Hooks 解析出的参数都是字符串类型。</p>
<p>当使用参数时，需要先导出 <strong>params</strong> 对象，然后再拿到参数值，对于一些数字、布尔类型值还只能再通过转换获得原始值。流程繁琐且复杂。怎么解决这个问题?</p>
<p>首先对 useRouter 进行初步封装</p>
<pre><code class="language-typescript">import { useRouter as useOriginRouter } from '@tarojs/taro'

export function useRouter&lt;T&gt;(): T {
  const { params } = useOriginRouter()
  return params
}
</code></pre>
<p>封装完的 useRouter 只简化了导出 params 的过程，而参数类型转换还是只能根据具体的参数进行具体转换。那这样的封装其实还是有点鸡肋。</p>
<p>通过 queryParams 传递的参数只能是字符串形式的，所以解析参数也只能解析出字符串。因而可以通过 <strong>JSON.stringify</strong> 将参数对象转换为字符串，解析时再利用 <strong>JSON.parse</strong> 解析出保有原始数据类型的参数。</p>
<pre><code class="language-typescript">import { useRouter as useOriginRouter, navigateTo as originNavigateTo } from '@tarojs/taro'

// 路由跳转
export function navigateTo(url: string, params?: object) {
  if (!params) return originNavigateTo({ url })

  const _url = `${url}?navParams=${JSON.stringify(params)}`
  originNavigateTo({ url: _url })
}

// 路由解析
export function useRouter&lt;T&gt;(): T {
  const { params } = useOriginRouter()

  try {
    const targetParams = params['navParams']
    if (targetParams) return JSON.parse(targetParams)
  } catch (e) {
    console.warn('参数解析失败', e)
  }

  return {} as T
}
</code></pre>
<p>使用这种封装方式，虽然 URL 不直观且不利于 SEO，但在小程序环境中，用户根本不会看到 URL，且在当前小程序环境中，SEO似乎根本没什么用。</p>
<p>使用我们封装好的代码，文章开头给出的示例可简化为如下代码:</p>
<pre><code class="language-typescript">import { navigateTo, useRouter } from '@/app'

navigateTo(URLs.MANAGE_APPOINTMENTS, { roomId, appointmentId, scriptId })
...

const { roomId, appointmentId, scriptId } = useRouter()
...

</code></pre>
<h2 id="完整路由脚本生成和代码">完整路由脚本生成和代码</h2>
<p>脚本代码很简单，就不新建仓库存了。</p>
<h3 id="主脚本文件">主脚本文件</h3>
<pre><code class="language-javascript">const path = require('path')
const fs = require('fs')
const { isDir, readDir, readFile, writeFile } = require('./util')
const PROJECT_CONFIG = require('../project.config.json')

const BASE_PATH = path.resolve(__dirname, '..')
const APP_CONFIG_PATH = path.resolve(BASE_PATH, 'src/app.config.ts')
const URL_TABLE_PATH = path.resolve(BASE_PATH, 'src/common/url.constant.ts')
const PACKAGE_CONFIG_PATH = path.resolve(BASE_PATH, 'project.config.json')

function handleMainPageConfig(dirsName, fileStr) {
  const paths = dirsName.map((dir) =&gt; `'pages/${dir}/index'\n`)
  fileStr = fileStr.replace(/pages[\S\s]*subPackages/, `pages: [${paths}], subPackages`)
  return fileStr
}

function handleSubPageConfig(rootPath, dirsName, subPackage) {
  const [, name] = rootPath.split('-')
  subPackage.push({
    root: rootPath,
    name,
    pages: dirsName.map((name) =&gt; `pages/${name}/index`),
  })
  return subPackage
}

function handleMainRouteTable(dirsName, fileStr) {
  const paths = dirsName.map((dir) =&gt; `'/pages/${dir}/index'\n`)
  for (let i = 0; i &lt; dirsName.length; i++) {
    const current = dirsName[i]
    const name = current
      .split('-')
      .map((v) =&gt; v.toUpperCase())
      .join('_')
    fileStr = fileStr + `${name}=${paths[i]},`
  }
  return fileStr
}

function handleSubRouteTable(rootPath, dirsName, fileStr) {
  const paths = dirsName.map((dir) =&gt; `'/${rootPath}/pages/${dir}/index'\n`)
  for (let i = 0; i &lt; dirsName.length; i++) {
    const current = dirsName[i]
    const name = current
      .split('-')
      .map((v) =&gt; v.toUpperCase())
      .join('_')
    fileStr = fileStr + `${name}=${paths[i]},`
  }
  return fileStr
}

function handleMainProjectConfig(dirsName, routes) {
  const paths = dirsName.map((dir) =&gt; `pages/${dir}/index`)
  return routes.concat(paths.map((_path, idx) =&gt; {
    return {
      id: idx + 1,
      name: dirsName[idx],
      pathName: _path,
      query: '',
    }
  }))
}

function handleSubProjectConfig(rootPath, dirsName, routes) {
  const paths = dirsName.map((dir) =&gt; `${rootPath}/pages/${dir}/index`)
  return routes.concat(
    paths.map((_path, idx) =&gt; {
      return {
        id: idx + 1,
        name: dirsName[idx],
        pathName: _path,
        query: '',
      }
    }),
  )
}

async function updateAppConfig(fileStr, subPackage) {
  fileStr = fileStr.replace(/(subPackages[\S\s]*)window/g, `subPackages: ${JSON.stringify(subPackage)}, window`)
  await writeFile(APP_CONFIG_PATH, fileStr)
}

async function updateRouteTable(fileStr) {
  let routeTable = `
    // 自动生成, pages 文件夹新建目录，运行 npm run g
    export enum URLs {
      ${fileStr}
    }
  `
  await writeFile(URL_TABLE_PATH, routeTable)
}

async function updateProjectConfig(entrance) {
  PROJECT_CONFIG.condition.miniprogram.list = entrance
  await writeFile(PACKAGE_CONFIG_PATH, JSON.stringify(PROJECT_CONFIG, null, 2))
}

function sortDirs(dirsName) {
  const indexIdx = dirsName.findIndex((dirname) =&gt; dirname === 'index')
  if (indexIdx === -1) return dirsName.sort((a, b) =&gt; a.localeCompare(b))
  dirsName.splice(indexIdx, 1)
  dirsName = dirsName.sort((a, b) =&gt; a.localeCompare(b))
  dirsName.unshift('index')
  return dirsName
}

async function main(dirPath) {
  const baseDirsName = await readDir(dirPath)
  const target = baseDirsName.filter((dirName) =&gt; /^pages$|^package-\w+$/.test(dirName))

  // 读取APP配置文件
  let appConfigFileStr = await readFile(APP_CONFIG_PATH)
  // app.config 分包配置
  let subPackage = []

  // 生成路由表文件
  let routeTableFileStr = ''
  
  // project.config 项目快捷入口配置
  let entrance = []
  let mainEntrance = []

  for await (let i of target) {
    if (i === 'pages') {
      const dirsName = sortDirs(await readDir(path.resolve(dirPath, i)))
      appConfigFileStr = handleMainPageConfig(dirsName, appConfigFileStr)
      routeTableFileStr = handleMainRouteTable(dirsName, routeTableFileStr)
      mainEntrance = handleMainProjectConfig(dirsName, [])
    } else {
      const dirsName = sortDirs(await readDir(path.resolve(dirPath, i, 'pages')))
      subPackage = handleSubPageConfig(i, dirsName, subPackage)
      routeTableFileStr = handleSubRouteTable(i, dirsName, routeTableFileStr)
      entrance = handleSubProjectConfig(i, dirsName, entrance)
    }
  }
  updateAppConfig(appConfigFileStr, subPackage)
  updateRouteTable(routeTableFileStr)
  updateProjectConfig(mainEntrance.concat(entrance))
}

// 主函数
main(path.resolve(BASE_PATH, 'src'))

</code></pre>
<h3 id="工具脚本文件">工具脚本文件</h3>
<pre><code class="language-javascript">const path = require('path')
const fs = require('fs')

// 当前路径是文件夹
function isDir(filePath) {
  return new Promise((resolve, reject) =&gt; {
    fs.stat(filePath, (err, stats) =&gt; {
      if (err) {
        reject(err)
      } else {
        resolve(stats.isDirectory())
      }
    })
  })
}

// 读取当前文件夹目录
function readDir(filePath) {
  return new Promise((resolve, reject) =&gt; {
    fs.readdir(filePath, 'utf8', (err, dir) =&gt; {
      if (err) {
        reject(err)
      } else {
        resolve(dir)
      }
    })
  })
}

// 读取文件
function readFile(filePath) {
  return new Promise((resolve, reject) =&gt; {
    fs.readFile(filePath, (err, dir) =&gt; {
      if (err) {
        reject(err)
      } else {
        resolve(dir.toString())
      }
    })
  })
}

// 写文件
async function writeFile(filePath, fileStr) {
  return new Promise((resolve, reject) =&gt; {
    fs.writeFile(filePath, fileStr, (err, res) =&gt; {
      if (err) return reject(err)
      resolve(res)
    })
  })
}

// 文件夹扫描
async function fileScanner(filePath, fn) {
  const dir = await isDir(filePath)
  if (dir) {
    const dirs = await readDir(filePath)
    for await (const name of dirs) {
      fileScanner(path.resolve(filePath, name), fn)
    }
  } else {
    await fn(filePath)
  }
}

module.exports = {
  isDir,
  readDir,
  readFile,
  writeFile,
  fileScanner,
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ReactNative渐进式图片加载]]></title>
        <id>https://aiyou.life/post/FEu-GtOkz/</id>
        <link href="https://aiyou.life/post/FEu-GtOkz/">
        </link>
        <updated>2020-09-05T16:22:37.000Z</updated>
        <summary type="html"><![CDATA[<p>最近在做ReactNative项目，我们的页面有很多图片，发现图片加载效果很卡顿。于是研究了一下RN下图片渐进加载。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近在做ReactNative项目，我们的页面有很多图片，发现图片加载效果很卡顿。于是研究了一下RN下图片渐进加载。</p>
<!-- more -->
<h2 id="原理">原理</h2>
<p>首先给图片一个固定宽高的容器，容器中有两个透明度为0的 Image 元素， 其中一个加载缩略图，一个为原图，监听图片加载，调整透明度，给过渡动画。</p>
<h2 id="依赖">依赖</h2>
<pre><code class="language-bash">react-native-fast-image   用于缓存图片
react-spring/native   用于实现动画效果
</code></pre>
<h2 id="对比图">对比图</h2>
<figure data-type="image" tabindex="1"><img src="https://aiyou.life/post-images/1599328089874.gif" alt="" loading="lazy"></figure>
<div style="text-align:center;font-size:80%">优化前</div>
<figure data-type="image" tabindex="2"><img src="https://aiyou.life/post-images/1599328239398.gif" alt="" loading="lazy"></figure>
<div style="text-align:center;font-size:80%">优化后</div>
<h2 id="核心代码">核心代码</h2>
<pre><code class="language-typescript">import React, { FC } from 'react'
import { View, StyleSheet, ImageStyle, ViewStyle, animated } from 'react-native'
import FastImage, { FastImageProps } from 'react-native-fast-image'
import { animated } from 'react-spring/native'
import { useSpring } from 'react-spring'

const AnimatedFastImage = animated(FastImage)

interface ImgStyle extends ImageStyle {
  width: number | string
  height: number | string
}

interface Props extends FastImageProps {
  thumbnailSource?: FastImageProps['source']
  style: ImgStyle
  containerStyle?: ViewStyle
}

export const ProgressiveImage: FC&lt;Props&gt; = ({
  thumbnailSource,
  source,
  style,
  containerStyle,
  ...props
}) =&gt; {
  const [thumbOpStyle, setThumbOpStyle] = useSpring(() =&gt; ({ opacity: 0, config: { duration: 500 } }))
  const [imgOpStyle, setImgOpStyle] = useSpring(() =&gt; ({ opacity: 0, config: { duration: 500 } }))

  function handleThumbnailLoad() {
    setThumbOpStyle({ opacity: 1, config: { duration: 500 } })
  }

  function onImageLoad() {
    setImgOpStyle({ opacity: 1, config: { duration: 500 } })
  }

  return (
    &lt;View style={[styles.container, { width: style.width, height: style.height }, containerStyle]}&gt;
      {thumbnailSource &amp;&amp; (
        &lt;AnimatedFastImage
          {...props}
          source={thumbnailSource}
          style={[style, thumbOpStyle]}
          onLoad={handleThumbnailLoad}
          blurRadius={1}
        /&gt;
      )}
      &lt;AnimatedFastImage
        {...props}
        source={source}
        style={[styles.imageOverlay, imgOpStyle, style]}
        onLoad={onImageLoad}
      /&gt;
    &lt;/View&gt;
  )
}

const styles = StyleSheet.create({
  imageOverlay: {
    position: 'absolute',
    left: 0,
    right: 0,
    bottom: 0,
    top: 0,
  },
  container: {
    backgroundColor: '#e1e4e8',
  },
})

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[多行文本溢出省略]]></title>
        <id>https://aiyou.life/post/qo35dDzbQ/</id>
        <link href="https://aiyou.life/post/qo35dDzbQ/">
        </link>
        <updated>2020-09-05T05:04:44.000Z</updated>
        <summary type="html"><![CDATA[<p>多行文本溢出省略技术是一个难题，无论是在前端还是APP端。文字何时换行，换行的是哪一个字，文字会占用几行都难以精确计算和估量。本文将探讨和实现一种相对完美的方法。</p>
]]></summary>
        <content type="html"><![CDATA[<p>多行文本溢出省略技术是一个难题，无论是在前端还是APP端。文字何时换行，换行的是哪一个字，文字会占用几行都难以精确计算和估量。本文将探讨和实现一种相对完美的方法。</p>
<!-- more -->
<h1 id="单行文本省略">单行文本省略</h1>
<p>单行文本省略较为简单，且兼容性较好。</p>
<p>要实现单行文本省略，下面CSS属性缺一不可</p>
<pre><code class="language-css">width: 100px;  // 固定宽度
overflow: hidden;   // 溢出隐藏
white-space: nowrap;    // 文字不换行
text-overflow: ellipsis;    // 文字溢出截断
</code></pre>
<h1 id="多行文本省略">多行文本省略</h1>
<p>当接到这个需求的时候，考虑到我们产品运行在微信小程序，而小程序在IOS和安卓平台都是用了webkit内核, 因而下面的代码应当在两个平台都可以很好运行。</p>
<p>webkit 内核的浏览器可以原生实现多行文本溢出省略。</p>
<pre><code class="language-css">display: -webkit-box；
-webkit-box-orient: vertical;
-webkit-line-clamp: 2;
overflow: hidden；
text-overflow: ellipsis；
</code></pre>
<p>然而事实并非如此。实际上面代码在安卓可以运行，但在IOS下则空白。<br>
<img src="https://aiyou.life/post-images/1599296417880.png" alt="" loading="lazy"></p>
<div style="text-align:center;font-size:80%">line-clamp兼容性</div>
<figure data-type="image" tabindex="1"><img src="https://aiyou.life/post-images/1599295340251.png" alt="" loading="lazy"></figure>
<div style="text-align:center;font-size:80%">微信小程序运行环境</div>
<figure data-type="image" tabindex="2"><img src="https://aiyou.life/post-images/1599296818625.png" alt="" loading="lazy"></figure>
<div style="text-align:center;font-size:80%">IOS WkWebView 基于 Webkit</div>
<p>找了半天资料，也没有找到原因。猜想可能 WkWebView 中的 webkit 版本太低的缘故。</p>
<p>既然上面的代码不能使用，只能尝试其他办法。</p>
<h2 id="js-方式">JS 方式</h2>
<p>JS计算裁剪的方式被排除了</p>
<ul>
<li>第一，这有悖于行为与展示相分离的理念</li>
<li>第二，要考虑汉字，英文字母，图标，全角半角符号等才能相对准确算出文字占用几行，要不要裁切</li>
<li>第三，我们的使用场景中要解析富文本，对于HTML标签，链接地址等要考虑的较多，实现方案较为复杂</li>
</ul>
<h2 id="css-方式">CSS 方式</h2>
<h3 id="方法一">方法一</h3>
<p>很容易写下下面这些代码，缺点是固定高度，文字数量必须超过两行，当文字只有一行或两行时，都会显示末尾的省略号。且文字超过两行，末尾的省略号有可能遮挡住一半的字符。这样的效果不是我们想要的。</p>
<pre><code class="language-css">.container {
    position: 'relative';
    width: 200px;
    height: 40px;
    line-height: 20px;
    overflow: hidden;
}
.container::after {
    content: '...';
    display: 'block';
    position: 'absolute';
    right: 0;
    bottom: 0;
}
</code></pre>
<h3 id="方法二">方法二</h3>
<p>CSS 处理的难点在于知道有没有换行，思考良久后无果，从网上找了找资料，发现一种很巧妙的办法。解决了一部分问题。</p>
<p>该方法利用浮动元素特性实现。原理很简单，但想法很独特。下面给出一个限定两行的例子。</p>
<h4 id="第一步创建如图布局">第一步：创建如图布局</h4>
<figure data-type="image" tabindex="3"><img src="https://aiyou.life/post-images/1599306945438.gif" alt="" loading="lazy"></figure>
<div style="text-align:center;font-size:80%">第一步</div>
<pre><code class="language-html">&lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;baseline&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;text&quot;&gt;这是一段很长的文本这是一段很长的文本这是一段很长的文本这是一段很长的文本&lt;/div&gt;
    &lt;div class=&quot;omit&quot;&gt;...&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-less">.container {
    background: #099;
    max-height: 40px;
    line-height: 20px;
    .baseline {
        float: left;
        width: 20px;
        height: 40px;
        background: yellow;
    }
    .text {
        float: right;
        width: calc(100% - 20px);
        background: blueviolet;
        word-break: break-all;
    }
    .omit {
        float: right;
        content: &quot;...&quot;;
        width: 20px;
        height: 20px;
        background: red;
    }
}
</code></pre>
<h4 id="第二步省略号归位">第二步：省略号归位</h4>
<figure data-type="image" tabindex="4"><img src="https://aiyou.life/post-images/1599314322562.gif" alt="" loading="lazy"></figure>
<div style="text-align:center;font-size:80%">第二步</div>
<pre><code class="language-less">...
    .omit {
        float: right;
        content: &quot;...&quot;;
        width: 20px;
        height: 20px;
        background: red;
        + position: relative;
        + left: 100%;
        + transform: translate(-100%, -100%);
    }
...
</code></pre>
<p>这里利用 position: relative 相对父元素将自己定位到了父元素的宽度外，之后利用 transform 向上向左移动了一个自己的宽高。当只有一行时，省略号移出了视线之外，当两行时，省略号回归了正确的位置。</p>
<h4 id="第三步隐藏多余元素">第三步：隐藏多余元素</h4>
<figure data-type="image" tabindex="5"><img src="https://aiyou.life/post-images/1599315200026.gif" alt="" loading="lazy"></figure>
<div style="text-align:center;font-size:80%">第三步</div>
<pre><code class="language-less">...
.container {
    background: #099;
    max-height: 40px;
    line-height: 20px;
    ++ overflow: hidden;
    ...
    .text {
        float: right;
        -- width: calc(100% - 20px);
        ++ width: 100%;
        ++ margin-left: -20px;
        background: blueviolet;
        word-break: break-all;
    }
...
</code></pre>
<p>这里使用 margin-left 为负，盖住了 baseline 元素。这样保证了基本布局不变，且达到了影藏无关元素的作用。由于在父元素中设定了 overflow: hidden, 清除浮动，所以父元素的背景颜色显示出来了。</p>
<h4 id="局限性">局限性</h4>
<figure data-type="image" tabindex="6"><img src="https://aiyou.life/post-images/1599316233622.gif" alt="" loading="lazy"></figure>
<div style="text-align:center;font-size:80%">局限</div>
使用该种方式，局限在于固定高度。baseline 元素必须设定为固定高度，因而撑起了父元素的高度。
<h4 id="注意">注意</h4>
<ul>
<li>container 元素中 maxHeight/Height 必须是 LineHeight 的整数倍。倍数表示限制几行</li>
<li>container 元素中 maxHeight/Height 要与 baseline 元素的 height 保持一致</li>
<li>baseline 元素宽度要与 emit 元素宽度保持一致</li>
<li>emit 元素高度要为 container 元素的行高</li>
</ul>
<h4 id="应用案例">应用案例</h4>
<figure data-type="image" tabindex="7"><img src="https://aiyou.life/post-images/1599318337342.png" alt="" loading="lazy"></figure>
<div style="text-align:center;font-size:80%">指尖探案小程序评论</div>
<p>对比App Store中的评论，可以看出我们的实现还是相对完美<br>
<img src="https://aiyou.life/post-images/1599318937357.jpg" alt="" loading="lazy"></p>
<div style="text-align:center;font-size:80%">AppStore评论</div>
<h2 id="参考">参考</h2>
<p><a href="https://juejin.im/post/5dc15b35f265da4d432a3d10#heading-9">可能是最全的 “文本溢出截断省略” 方案合集</a></p>
]]></content>
    </entry>
</feed>